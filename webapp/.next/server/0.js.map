{"version":3,"file":"0.js","sources":["webpack:///./components/controls/Calendar/Calendar.js"],"sourcesContent":["// import 'babel-polyfill' /* Support for IE11 */\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Calendar from 'react-calendar-multiday'\r\nimport moment from 'moment'\r\nimport {omit} from 'ramda'\r\nimport './calendar.css'\r\n\r\n\r\nconst PositionDay = props => {\r\n    let day = moment(props.date.moment).toDate();\r\n    let endDate = new Date(props.endDate)\r\n\r\n    let isFuture = false;\r\n    if(day.getTime() > endDate.getTime()) {\r\n        isFuture = true;\r\n    }\r\n\r\n    const onClick = (e) => {\r\n        if (isFuture || props.isInThePast || !props.enabledAll || props.noEditable) {\r\n            e.stopPropagation()\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div onClick={onClick}\r\n             className={getStyle(props)}\r\n             style={getInline(isFuture ? {isInThePast: true} : props)}>\r\n            {props.label}\r\n        </div>)\r\n}\r\n\r\nconst getStyle = function ({date, isSelected}) {\r\n    return `${isSelected ? 'o_selected-day' : ''} ${date.type}-day`\r\n}\r\n\r\nconst getInline = ({isToday, isInThePast}) => ({\r\n    cursor: isInThePast ? 'not-allowed' : 'inherit',\r\n    borderColor: 'rgb(228, 231, 231) !important',\r\n    color: isInThePast ? 'rgb(202, 204, 205)' : 'inherit',\r\n    background: isToday\r\n        ? 'inherit'\r\n        : isInThePast ? 'rgb(255, 255, 255)' : 'inherit'\r\n})\r\n\r\n\r\n\r\nexport default class App extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            currentChannel: 0,\r\n            channels: {},\r\n            selectedDays: []\r\n        }\r\n    }\r\n\r\n    // componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //     if(prevProps.selectedDays.length == this.props.selectedDays.length) return\r\n    //     this.setState({selectedDays: this.props.selectedDays})\r\n    // }\r\n\r\n    onReset = () => {\r\n        this.setState({\r\n            channels: {},\r\n            currentChannel: 0\r\n        })\r\n    }\r\n\r\n    reactToChange = obj => {\r\n        if(this.props.enabledAll && this.props.setSelected) {\r\n            this.props.setSelected(obj.selected)\r\n        }\r\n    }\r\n\r\n\r\n    render () {\r\n        if(!process.browser) return null;\r\n        console.log('this.props.selectedDays', this.props.selectedDays)\r\n        return (\r\n            <div className={`z-calendar-wrapper ${this.props.enabledAll ? 'enabled-all' : 'disabled-all'}`}>\r\n                <Calendar\r\n                    isMultiple={true}\r\n                    // reset={true}\r\n                    selected={this.props.selectedDays}\r\n                    onChange={this.reactToChange}\r\n                    DayComponent={<PositionDay enabledAll={this.props.enabledAll} noEditable={this.props.noEditable} endDate={this.props.endDate} />}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAUA;AACA;AACA;AACA;AAFA;AAeA;AACA;AACA;AAFA;AAIA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AAxBA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAAA;AAEA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AA5CA;;;;;;;;;;;;;;;A","sourceRoot":""}