{"version":3,"file":"1.js","sources":["webpack:///./components/controls/Calendar/CalendarAirbnb.js"],"sourcesContent":["import React, {useContext} from 'react'\r\n// import Calendar from 'react-calendar-multiday'\r\nimport 'react-dates/initialize';\r\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\r\nimport moment from 'moment'\r\nimport './calendar.css'\r\nimport 'react-dates/lib/css/_datepicker.css';\r\nimport {MainContext} from \"../../contextProviders/MainContext\";\r\n\r\n\r\nexport default class App extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            startDate: null,\r\n            endDate: null,\r\n            focusedInput: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.calendar)\r\n        console.log(this.props.endDateOffer)\r\n        console.log(this.props.userId)\r\n    }\r\n\r\n    onDatesChange = (startDate, endDate) => {\r\n        // this.setState({ startDate, endDate })\r\n        this.props.onChangeDates({\r\n            startDate: moment(startDate).toDate(),\r\n            endDate: moment(endDate).toDate()\r\n        })\r\n    }\r\n\r\n    isSameDay = (d1, d2) => {\r\n        return d1.getFullYear() === d2.getFullYear() &&\r\n            d1.getMonth() === d2.getMonth() &&\r\n            d1.getDate() === d2.getDate();\r\n    }\r\n\r\n    isDisabledDay = (mDay) => {\r\n        let isDisable = false\r\n        this.props.calendar.map((item, key) => {\r\n            if(item.status == 'disabled' ||\r\n                (item.status == 'reserved' && this.props.userId != item.clientId)\r\n            ) {\r\n                if(this.isSameDay(mDay, moment(item.date).toDate())) {\r\n                    isDisable = true\r\n                }\r\n            }\r\n        })\r\n        return isDisable;\r\n    }\r\n\r\n    isDayReservedByMe = day => {\r\n        let mDay = moment(day).toDate()\r\n        let isReserved = false\r\n        this.props.calendar.map((item, key) => {\r\n            if(item.status == 'reserved' && this.props.userId == item.clientId) {\r\n                if(this.isSameDay(mDay, moment(item.date).toDate())) {\r\n                    isReserved = true\r\n                }\r\n            }\r\n        })\r\n        return isReserved;\r\n    }\r\n\r\n    isOutsideRange = day => {\r\n        const todayDate = moment().toDate()\r\n        let mDay = moment(day).toDate()\r\n        let endDate = moment(this.props.endDateOffer).toDate()\r\n        if(this.isSameDay(new Date(todayDate), new Date(mDay))) {\r\n            return false\r\n        }\r\n        if(mDay < todayDate || mDay > endDate) {\r\n            return true\r\n        }\r\n        if(this.isDisabledDay(mDay)){\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    isDayBlocked = day => {\r\n        // const todayDate = moment().toDate()\r\n        // let mDay = moment(day).toDate()\r\n        // let endDate = moment(this.props.endDate).toDate()\r\n        //\r\n        // if(mDay < endDate) {\r\n        //     return true\r\n        // }\r\n        return false\r\n    }\r\n\r\n\r\n\r\n    render () {\r\n        if(!process.browser) return null;\r\n\r\n        let campaignStartDate = '23/10/2019';\r\n        let campaignEndDate= '29/10/2019';\r\n\r\n\r\n        let startDate = this.props.bookingDates.startDate ? moment(this.props.bookingDates.startDate) : null,\r\n            endDate = this.props.bookingDates.endDate ? moment(this.props.bookingDates.endDate) : null\r\n\r\n\r\n\r\n        return (\r\n            <div className='z-wrapper-airnb-calendar'>\r\n                <DateRangePicker\r\n                    startDate={startDate} // momentPropTypes.momentObj or null,\r\n                    endDate={endDate} // momentPropTypes.momentObj or null,\r\n                    onDatesChange={({ startDate, endDate }) => this.onDatesChange(startDate, endDate )}\r\n                    startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\r\n                    endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\r\n                    focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\r\n                    onFocusChange={focusedInput => this.setState({ focusedInput })} // PropTypes.func.isRequired,\r\n                    numberOfMonths={1}\r\n                    minimumNights={0}\r\n                    isOutsideRange={(date) => this.isOutsideRange(date)}\r\n                    isDayBlocked={(date) => this.isDayBlocked(date)}\r\n                    isDayHighlighted={date => this.isDayReservedByMe(date)}\r\n                    enableOutsideDays={true}\r\n                    displayFormat={() => \"DD/MM/YYYY\"}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAgBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAtBA;AAwBA;AAGA;AACA;AA5BA;AA8BA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAyDA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvEA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjFA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwEA;AACA;AAEA;AACA;AAGA;AAAA;AAKA;AACA;AAAA;AAEA;AADA;AAEA;AAFA;AAGA;AAAA;AAAA;AAAA;AACA;AAJA;AAKA;AALA;AAMA;AANA;AAOA;AAAA;AAAA;AAPA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAkBA;AACA;AAxHA;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}