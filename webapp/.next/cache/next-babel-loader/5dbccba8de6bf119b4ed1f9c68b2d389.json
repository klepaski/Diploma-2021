{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styled from 'styled-components';\nimport { space } from 'styled-system';\nimport { Check } from '../../StyledComponents/Icon';\nimport { Text } from '../../StyledComponents/Text';\nimport { Counter } from '../Counter/Counter';\nimport { Button } from '../Button/Button';\nexport const InputWrapper = styled.div`\n  ${space};\n  position: relative;\n  min-height: 61px;\n  height: 61px;\n  width: 100%;\n`;\nconst InputStyled = styled.input.attrs(props => ({\n  type: props.type\n}))`\n  // ${space};\n  font-size: ${props => props.fz ? `${props.fz}px` : '14px'}\n  color: rgba(1, 1, 1, 0.8);\n  width: 100%;\n  height: ${props => props.height40 ? '40px' : '46px'}\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  border-radius: 5px;\n  padding: 13px;\n  box-sizing: border-box;\n  \n  :focus {\n    outline: none;\n  }\n  ::-webkit-input-placeholder {\n      color: rgba(1, 1, 1, 0.5);\n    }\n    :-ms-input-placeholder { \n      color: rgba(1, 1, 1, 0.5);\n    }\n    ::placeholder {\n      color: rgba(1, 1, 1, 0.5);\n    }\n`;\nconst TextAreaStyled = styled.textarea.attrs(props => ({\n  type: props.type\n}))`\n  ${space};\n  font-size: ${props => props.fz ? `${props.fz}px` : '14px'}\n  color: rgba(1, 1, 1, 0.8);\n  width: 100%;\n  height:  ${props => props.height ? `${props.height}px` : '95px'};\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  border-radius: 5px;\n  padding: 13px;\n  box-sizing: border-box;\n  white-space: pre-line;\n  resize: none;\n  \n  :focus {\n    outline: none;\n  }\n  ::-webkit-input-placeholder {\n      color: rgba(1, 1, 1, 0.5);\n    }\n    :-ms-input-placeholder { \n      color: rgba(1, 1, 1, 0.5);\n    }\n    ::placeholder {\n      color: rgba(1, 1, 1, 0.5);\n    }\n  ::before {\n    content: ${props => props.count};\n  }  \n`;\nconst TextAreaWrapper = styled.div`\n  ${space};\n  position: relative;\n`;\nconst TextAreaCount = styled.div`\n  ${space};\n  position: absolute;\n  bottom: 7px;\n  right: 7px;\n  font-size: 12px;\n  color: #898989;\n`;\nconst Error = styled.div`\n  ${space};\n  position: relative;\n  font-size: 11px;\n  text-align: right;\n  color: #bb1616;\n`;\n\nconst Input = (_ref) => {\n  let {\n    count\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"count\"]);\n\n  return __jsx(InputWrapper, props, __jsx(InputStyled, props), props.error && __jsx(Error, null, props.error));\n};\n\nconst TextArea = (_ref2) => {\n  let {\n    maxLength,\n    value = ''\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"maxLength\", \"value\"]);\n\n  let mL = maxLength || 300,\n      count = mL - value.length;\n  if (count < 0) count = 0;\n  if (!maxLength) count = '';\n  return __jsx(TextAreaWrapper, null, __jsx(TextAreaStyled, _extends({\n    value: value\n  }, props)), __jsx(TextAreaCount, null, count));\n};\n\nconst Input2 = (_ref3) => {\n  let props = _Object$assign({}, _ref3);\n\n  return __jsx(InputWrapper, props, __jsx(InputStyled, props));\n};\n\nconst Wrapper = styled.div`\n  ${space};\n  display: flex;\n  width: 100%;\n\n  Input2 {\n    width: calc(100% - 80px);\n  }\n\n  input {\n    border-radius: 5px 0 0 5px;\n    border-right: none;\n  }\n\n  Button {\n    width: 80px;\n    border-radius: 0 5px 5px 0;\n  }\n`;\n\nconst InputWithButton = (_ref4) => {\n  let {\n    disabled,\n    handleClick\n  } = _ref4,\n      props = _objectWithoutProperties(_ref4, [\"disabled\", \"handleClick\"]);\n\n  return __jsx(Wrapper, null, __jsx(Input2, props), __jsx(Button, {\n    transparent: true,\n    disabled: disabled,\n    onClick: handleClick\n  }, \"Add\"));\n};\n\nexport { Input, TextArea, InputWithButton };","map":{"version":3,"sources":["D:/git/webapp3/webapp/components/controls/Input/Input.js"],"names":["styled","space","Check","Text","Counter","Button","InputWrapper","div","InputStyled","input","attrs","props","type","fz","height40","TextAreaStyled","textarea","height","count","TextAreaWrapper","TextAreaCount","Error","Input","error","TextArea","maxLength","value","mL","length","Input2","Wrapper","InputWithButton","disabled","handleClick"],"mappings":"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","sourcesContent":["import styled from 'styled-components'\r\nimport { space } from 'styled-system'\r\nimport { Check } from '../../StyledComponents/Icon'\r\nimport { Text } from '../../StyledComponents/Text'\r\nimport { Counter } from '../Counter/Counter'\r\nimport { Button } from '../Button/Button'\r\n\r\nexport const InputWrapper = styled.div`\r\n  ${space};\r\n  position: relative;\r\n  min-height: 61px;\r\n  height: 61px;\r\n  width: 100%;\r\n`\r\nconst InputStyled = styled.input.attrs((props) => ({\r\n  type: props.type,\r\n}))`\r\n  // ${space};\r\n  font-size: ${(props) => (props.fz ? `${props.fz}px` : '14px')}\r\n  color: rgba(1, 1, 1, 0.8);\r\n  width: 100%;\r\n  height: ${(props) => (props.height40 ? '40px' : '46px')}\r\n  border: 1px solid rgba(0, 0, 0, 0.3);\r\n  border-radius: 5px;\r\n  padding: 13px;\r\n  box-sizing: border-box;\r\n  \r\n  :focus {\r\n    outline: none;\r\n  }\r\n  ::-webkit-input-placeholder {\r\n      color: rgba(1, 1, 1, 0.5);\r\n    }\r\n    :-ms-input-placeholder { \r\n      color: rgba(1, 1, 1, 0.5);\r\n    }\r\n    ::placeholder {\r\n      color: rgba(1, 1, 1, 0.5);\r\n    }\r\n`\r\nconst TextAreaStyled = styled.textarea.attrs((props) => ({\r\n  type: props.type,\r\n}))`\r\n  ${space};\r\n  font-size: ${(props) => (props.fz ? `${props.fz}px` : '14px')}\r\n  color: rgba(1, 1, 1, 0.8);\r\n  width: 100%;\r\n  height:  ${(props) => (props.height ? `${props.height}px` : '95px')};\r\n  border: 1px solid rgba(0, 0, 0, 0.3);\r\n  border-radius: 5px;\r\n  padding: 13px;\r\n  box-sizing: border-box;\r\n  white-space: pre-line;\r\n  resize: none;\r\n  \r\n  :focus {\r\n    outline: none;\r\n  }\r\n  ::-webkit-input-placeholder {\r\n      color: rgba(1, 1, 1, 0.5);\r\n    }\r\n    :-ms-input-placeholder { \r\n      color: rgba(1, 1, 1, 0.5);\r\n    }\r\n    ::placeholder {\r\n      color: rgba(1, 1, 1, 0.5);\r\n    }\r\n  ::before {\r\n    content: ${(props) => props.count};\r\n  }  \r\n`\r\nconst TextAreaWrapper = styled.div`\r\n  ${space};\r\n  position: relative;\r\n`\r\nconst TextAreaCount = styled.div`\r\n  ${space};\r\n  position: absolute;\r\n  bottom: 7px;\r\n  right: 7px;\r\n  font-size: 12px;\r\n  color: #898989;\r\n`\r\nconst Error = styled.div`\r\n  ${space};\r\n  position: relative;\r\n  font-size: 11px;\r\n  text-align: right;\r\n  color: #bb1616;\r\n`\r\n\r\nconst Input = ({ count, ...props }) => {\r\n  return (\r\n    <InputWrapper {...props}>\r\n      <InputStyled {...props} />\r\n      {props.error && <Error>{props.error}</Error>}\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nconst TextArea = ({ maxLength, value = '', ...props }) => {\r\n  let mL = maxLength || 300,\r\n    count = mL - value.length\r\n  if (count < 0) count = 0\r\n  if (!maxLength) count = ''\r\n  return (\r\n    <TextAreaWrapper>\r\n      <TextAreaStyled value={value} {...props} />\r\n      <TextAreaCount>{count}</TextAreaCount>\r\n    </TextAreaWrapper>\r\n  )\r\n}\r\n\r\nconst Input2 = ({ ...props }) => {\r\n  return (\r\n    <InputWrapper {...props}>\r\n      <InputStyled {...props} />\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  ${space};\r\n  display: flex;\r\n  width: 100%;\r\n\r\n  Input2 {\r\n    width: calc(100% - 80px);\r\n  }\r\n\r\n  input {\r\n    border-radius: 5px 0 0 5px;\r\n    border-right: none;\r\n  }\r\n\r\n  Button {\r\n    width: 80px;\r\n    border-radius: 0 5px 5px 0;\r\n  }\r\n`\r\n\r\nconst InputWithButton = ({ disabled, handleClick, ...props }) => {\r\n  return (\r\n    <Wrapper>\r\n      <Input2 {...props} />\r\n      <Button transparent disabled={disabled} onClick={handleClick}>\r\n        Add\r\n      </Button>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport { Input, TextArea, InputWithButton }\r\n"]},"metadata":{},"sourceType":"module"}