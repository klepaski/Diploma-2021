{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Title, Label } from \"./../../Layouts/styledLayouts\";\nimport { Input, TextArea } from \"../../controls/Input/Input\";\nimport { Counter } from \"../../controls/Counter/Counter\";\nimport { Wrapper } from \"../../StyledComponents/Wrapper\";\nimport { Text } from \"../../StyledComponents/Text\";\nimport { MainContext } from \"../../contextProviders/MainContext\";\nexport default (function (_ref) {\n  var onChange = _ref.onChange;\n\n  var _useState = useState(0),\n      count = _useState[0],\n      setCount = _useState[1];\n\n  var _useState2 = useState([]),\n      arr = _useState2[0],\n      setArr = _useState2[1];\n\n  var _useContext = useContext(MainContext),\n      me = _useContext.me;\n\n  var onChangeCount = function onChangeCount(_ref2) {\n    var name = _ref2.name,\n        value = _ref2.value,\n        required = _ref2.required;\n    setCount(value);\n\n    var clone = _toConsumableArray(arr);\n\n    if (clone.length < value) {\n      clone.push('');\n    } else {\n      clone.pop();\n    }\n\n    setArr(clone);\n  };\n\n  var onChangeEmail = function onChangeEmail(key, value) {\n    var clone = _toConsumableArray(arr);\n\n    clone[key] = value;\n    setArr(clone);\n    onChange({\n      target: {\n        name: 'listEmails',\n        value: clone\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Title, {\n    mb: 25\n  }, \"How many people are involved in your offer (in total)?\"), __jsx(Wrapper, {\n    mb: 25\n  }, __jsx(Counter, {\n    name: \"\",\n    value: count,\n    onChange: onChangeCount,\n    readOnly: true\n  })), !!arr.length && __jsx(Text, {\n    mb: 15,\n    fz: 18\n  }, \"Invite participants\"), arr.map(function (item, key) {\n    return __jsx(Input, {\n      key: key,\n      type: \"text\",\n      name: \"\",\n      value: arr[key],\n      onChange: function onChange(e) {\n        return onChangeEmail(key, e.target.value);\n      },\n      mb: 15,\n      placeholder: \"Enter email\"\n    });\n  }));\n});","map":{"version":3,"sources":["D:/4/диплом/webapp — копия/components/Offer/creation/People.js"],"names":["React","useState","useContext","Title","Label","Input","TextArea","Counter","Wrapper","Text","MainContext","onChange","count","setCount","arr","setArr","me","onChangeCount","name","value","required","clone","length","push","pop","onChangeEmail","key","target","map","item","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,SAAQC,KAAR,EAAeC,KAAf,QAA2B,+BAA3B;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,4BAA9B;AACA,SAAQC,OAAR,QAAsB,gCAAtB;AACA,SAAQC,OAAR,QAAsB,gCAAtB;AACA,SAAQC,IAAR,QAAmB,6BAAnB;AACA,SAAQC,WAAR,QAA0B,oCAA1B;AAEA,gBAAe,gBAAgB;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAAA,kBACDV,QAAQ,CAAC,CAAD,CADP;AAAA,MACpBW,KADoB;AAAA,MACbC,QADa;;AAAA,mBAELZ,QAAQ,CAAC,EAAD,CAFH;AAAA,MAEpBa,GAFoB;AAAA,MAEfC,MAFe;;AAAA,oBAGdb,UAAU,CAACQ,WAAD,CAHI;AAAA,MAGpBM,EAHoB,eAGpBA,EAHoB;;AAK3B,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,QAA6B;AAAA,QAA3BC,IAA2B,SAA3BA,IAA2B;AAAA,QAArBC,KAAqB,SAArBA,KAAqB;AAAA,QAAdC,QAAc,SAAdA,QAAc;AAC/CP,IAAAA,QAAQ,CAACM,KAAD,CAAR;;AACA,QAAIE,KAAK,sBAAOP,GAAP,CAAT;;AAEA,QAAGO,KAAK,CAACC,MAAN,GAAeH,KAAlB,EAAyB;AACrBE,MAAAA,KAAK,CAACE,IAAN,CAAW,EAAX;AACH,KAFD,MAEO;AACHF,MAAAA,KAAK,CAACG,GAAN;AACH;;AACDT,IAAAA,MAAM,CAACM,KAAD,CAAN;AACH,GAVD;;AAYA,MAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMP,KAAN,EAAgB;AAClC,QAAIE,KAAK,sBAAOP,GAAP,CAAT;;AACAO,IAAAA,KAAK,CAACK,GAAD,CAAL,GAAaP,KAAb;AACAJ,IAAAA,MAAM,CAACM,KAAD,CAAN;AAEAV,IAAAA,QAAQ,CAAC;AAACgB,MAAAA,MAAM,EAAE;AAACT,QAAAA,IAAI,EAAE,YAAP;AAAqBC,QAAAA,KAAK,EAAEE;AAA5B;AAAT,KAAD,CAAR;AACH,GAND;;AASA,SACI,4BACI,MAAC,KAAD;AAAO,IAAA,EAAE,EAAE;AAAX,8DADJ,EAKI,MAAC,OAAD;AAAS,IAAA,EAAE,EAAE;AAAb,KACI,MAAC,OAAD;AACI,IAAA,IAAI,EAAC,EADT;AAEI,IAAA,KAAK,EAAET,KAFX;AAGI,IAAA,QAAQ,EAAEK,aAHd;AAII,IAAA,QAAQ;AAJZ,IADJ,CALJ,EAcK,CAAC,CAACH,GAAG,CAACQ,MAAN,IAAgB,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,EAAV;AAAc,IAAA,EAAE,EAAE;AAAlB,2BAdrB,EAiBQR,GAAG,CAACc,GAAJ,CAAQ,UAACC,IAAD,EAAOH,GAAP;AAAA,WACJ,MAAC,KAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,IAAI,EAAC,EAHT;AAII,MAAA,KAAK,EAAEZ,GAAG,CAACY,GAAD,CAJd;AAKI,MAAA,QAAQ,EAAE,kBAACI,CAAD;AAAA,eAAOL,aAAa,CAACC,GAAD,EAAMI,CAAC,CAACH,MAAF,CAASR,KAAf,CAApB;AAAA,OALd;AAMI,MAAA,EAAE,EAAE,EANR;AAOI,MAAA,WAAW,EAAC;AAPhB,MADI;AAAA,GAAR,CAjBR,CADJ;AAkCH,CA5DD","sourcesContent":["import React, { useState, useContext } from 'react';\r\n\r\nimport {Title, Label} from \"./../../Layouts/styledLayouts\";\r\nimport {Input, TextArea} from \"../../controls/Input/Input\";\r\nimport {Counter} from \"../../controls/Counter/Counter\";\r\nimport {Wrapper} from \"../../StyledComponents/Wrapper\";\r\nimport {Text} from \"../../StyledComponents/Text\";\r\nimport {MainContext} from \"../../contextProviders/MainContext\";\r\n\r\nexport default ({onChange}) => {\r\n    const [count, setCount] = useState(0)\r\n    const [arr, setArr] = useState([])\r\n    const {me} = useContext(MainContext)\r\n\r\n    const onChangeCount = ({name, value, required}) => {\r\n        setCount(value)\r\n        let clone = [...arr]\r\n\r\n        if(clone.length < value) {\r\n            clone.push('')\r\n        } else {\r\n            clone.pop()\r\n        }\r\n        setArr(clone)\r\n    }\r\n\r\n    const onChangeEmail = (key, value) => {\r\n        let clone = [...arr]\r\n        clone[key] = value\r\n        setArr(clone)\r\n\r\n        onChange({target: {name: 'listEmails', value: clone}})\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Title mb={25} >\r\n                How many people are involved in your offer (in total)?\r\n            </Title>\r\n\r\n            <Wrapper mb={25}>\r\n                <Counter\r\n                    name=''\r\n                    value={count}\r\n                    onChange={onChangeCount}\r\n                    readOnly\r\n                />\r\n            </Wrapper>\r\n\r\n            {!!arr.length && <Text mb={15} fz={18}>Invite participants</Text>}\r\n\r\n            {\r\n                arr.map((item, key) =>\r\n                    <Input\r\n                        key={key}\r\n                        type='text'\r\n                        name=''\r\n                        value={arr[key]}\r\n                        onChange={(e) => onChangeEmail(key, e.target.value)}\r\n                        mb={15}\r\n                        placeholder=\"Enter email\"\r\n                    />\r\n                )\r\n            }\r\n\r\n\r\n        </>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}