{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Link from \"next/link\";\nimport moment from 'moment';\nimport dynamic from 'next/dynamic';\nimport Router, { useRouter } from 'next/router';\nimport Header from \"../../../components/Header/Header\";\nimport { HeaderChat, ContainerMessages, FooterChat, TextareaMessage, SendBtn, ProtectMessage, WrapperContentMessages, Details, OfferNameHeaderWrapper, OfferNameHeader, OfferDates, FadeMessages } from \"../../../components/Inbox/styledComponent\";\nimport Message from \"../../../components/Inbox/Message\";\nimport { Text } from \"../../../components/StyledComponents/Text\";\nimport { apiGetPreChat, apiGetPreChatMessages, apiGetUserById, apiSendPreChatMessage, apiReadMessages } from \"../../../actions/api\";\nimport { MainContext } from \"../../../components/contextProviders/MainContext\";\nimport { Button } from \"../../../components/controls/Button/Button\";\nimport { Footer } from \"../../../components/Layouts/styledLayouts\";\nimport arrowBack from \"../../../static/img/arrow-back.svg\";\nexport default (() => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    me,\n    handleChangeUnreadMessages\n  } = useContext(MainContext);\n  const {\n    0: chat,\n    1: setChat\n  } = useState({});\n  const {\n    0: sender,\n    1: setSender\n  } = useState({});\n  const {\n    0: dates,\n    1: setDates\n  } = useState('');\n  const {\n    0: newMessage,\n    1: setNewMessage\n  } = useState('');\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: isCoverFade,\n    1: setIsCoverFade\n  } = useState(true);\n  const {\n    0: loadingMessages,\n    1: setLoadingMessages\n  } = useState(true);\n  const messagesEnd = useRef(null);\n  const myRef = useRef(null);\n  useEffect(() => {\n    if (id && me.id) {\n      apiGetPreChat(id).then(res => {\n        setChat(res.data);\n        setLoading(false);\n        apiGetPreChatMessages(id).then(res => {\n          setLoadingMessages(false);\n          setMessages(res.data);\n          getSender(res.data);\n          readMessages(res.data);\n        }).catch(e => {\n          setLoading(false);\n        });\n      }).catch(e => {\n        setLoading(false);\n      });\n    }\n  }, [id, me.id]);\n  useEffect(() => {\n    scrollToBottom();\n    setTimeout(() => {\n      setIsCoverFade(false);\n    }, 500);\n  }, [messages.length]);\n\n  const scrollToBottom = () => {\n    if (messagesEnd.current) {\n      messagesEnd.current.scrollIntoView();\n    }\n  };\n\n  const readMessages = msgs => {\n    let count = 0,\n        arr = [];\n    msgs.map(item => {\n      if (item.senderId !== me.id && item.status != 'read') {\n        arr.push(item.id);\n      }\n\n      if (item.status === 'pending') count++;\n    });\n\n    if (count) {\n      apiReadMessages(arr).then(res => {\n        handleChangeUnreadMessages(count);\n      }).catch(e => {});\n    }\n  };\n\n  const getSender = async msgs => {\n    let senderMsg = msgs.find(item => {\n      if (!item.senderId) return null;\n      return item.senderId !== me.id;\n    });\n    console.log('senderMsg', senderMsg);\n\n    if (senderMsg && senderMsg.senderId) {\n      const res = await apiGetUserById(senderMsg.senderId);\n      setSender(res.data);\n    }\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {// e.preventDefault()\n      // send()\n    }\n  };\n\n  const send = () => {\n    console.log('send', newMessage);\n    if (!newMessage) return;\n    apiSendPreChatMessage(id, {\n      text: newMessage\n    }).then(res => {\n      setNewMessage('');\n      setMessages([...messages, res.data]);\n      scrollToBottom();\n    }).catch(e => {});\n  };\n\n  if (!chat.offerId) chat.offerId = {};\n  return __jsx(React.Fragment, null, !loading ? __jsx(\"div\", {\n    style: {\n      height: '100vh'\n    }\n  }, __jsx(HeaderChat, null, __jsx(Link, {\n    href: `/inbox`\n  }, __jsx(\"img\", {\n    src: arrowBack,\n    alt: \"\"\n  })), __jsx(OfferNameHeaderWrapper, null, __jsx(OfferNameHeader, null, chat.offerId.name)), __jsx(Link, {\n    href: \"/offers/[id]\",\n    as: `/offers/${chat.offerId.id}`,\n    shallow: true\n  }, __jsx(Details, null, \"Details\"))), __jsx(WrapperContentMessages, null, __jsx(ProtectMessage, null, \"To protect your payments, always communicate and pay through the Talentbooking website.\"), !loadingMessages ? __jsx(ContainerMessages, null, isCoverFade && __jsx(FadeMessages, null), messages.map((item, key) => __jsx(Message, {\n    key: key,\n    message: item,\n    me: me,\n    sender: sender\n  }))) : __jsx(\"div\", null, \"Loading...\"), __jsx(\"div\", {\n    style: {\n      float: \"left\",\n      clear: \"both\"\n    },\n    ref: messagesEnd\n  })), __jsx(FooterChat, null, __jsx(TextareaMessage, {\n    placeholder: \"Write a message\",\n    value: newMessage,\n    onChange: e => setNewMessage(e.target.value),\n    onKeyDown: handleKeyDown\n  }), __jsx(SendBtn, {\n    onClick: send\n  }, \"Send\"))) : __jsx(React.Fragment, null, \"Loading...\"));\n});","map":{"version":3,"sources":["D:/git/webapp3/webapp/pages/inbox/[id]/offer.js"],"names":["React","useState","useContext","useEffect","useRef","Link","moment","dynamic","Router","useRouter","Header","HeaderChat","ContainerMessages","FooterChat","TextareaMessage","SendBtn","ProtectMessage","WrapperContentMessages","Details","OfferNameHeaderWrapper","OfferNameHeader","OfferDates","FadeMessages","Message","Text","apiGetPreChat","apiGetPreChatMessages","apiGetUserById","apiSendPreChatMessage","apiReadMessages","MainContext","Button","Footer","arrowBack","router","id","query","me","handleChangeUnreadMessages","chat","setChat","sender","setSender","dates","setDates","newMessage","setNewMessage","messages","setMessages","loading","setLoading","isCoverFade","setIsCoverFade","loadingMessages","setLoadingMessages","messagesEnd","myRef","then","res","data","getSender","readMessages","catch","e","scrollToBottom","setTimeout","length","current","scrollIntoView","msgs","count","arr","map","item","senderId","status","push","senderMsg","find","console","log","handleKeyDown","key","send","text","offerId","height","name","float","clear","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport Link from \"next/link\";\r\nimport moment from 'moment'\r\nimport dynamic from 'next/dynamic';\r\nimport Router, { useRouter } from 'next/router'\r\nimport Header from \"../../../components/Header/Header\";\r\nimport {\r\n    HeaderChat,\r\n    ContainerMessages,\r\n    FooterChat,\r\n    TextareaMessage,\r\n    SendBtn,\r\n    ProtectMessage,\r\n    WrapperContentMessages,\r\n    Details,\r\n    OfferNameHeaderWrapper,\r\n    OfferNameHeader,\r\n    OfferDates,\r\n    FadeMessages\r\n} from \"../../../components/Inbox/styledComponent\"\r\nimport Message from \"../../../components/Inbox/Message\"\r\nimport {Text} from \"../../../components/StyledComponents/Text\"\r\nimport {apiGetPreChat, apiGetPreChatMessages, apiGetUserById, apiSendPreChatMessage, apiReadMessages} from \"../../../actions/api\";\r\nimport {MainContext} from \"../../../components/contextProviders/MainContext\";\r\nimport {Button} from \"../../../components/controls/Button/Button\";\r\nimport {Footer} from \"../../../components/Layouts/styledLayouts\";\r\nimport arrowBack from \"../../../static/img/arrow-back.svg\"\r\n\r\n\r\nexport default  () => {\r\n    const router = useRouter()\r\n    const { id } = router.query\r\n    const {me, handleChangeUnreadMessages} = useContext(MainContext)\r\n    const [chat, setChat] = useState({})\r\n    const [sender, setSender] = useState({})\r\n    const [dates, setDates] = useState('')\r\n    const [newMessage, setNewMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [isCoverFade, setIsCoverFade] = useState(true)\r\n    const [loadingMessages, setLoadingMessages] = useState(true)\r\n    const messagesEnd = useRef(null);\r\n    const myRef = useRef(null)\r\n\r\n\r\n    useEffect(() => {\r\n        if(id && me.id) {\r\n            apiGetPreChat(id)\r\n                .then(res => {\r\n                    setChat(res.data)\r\n                    setLoading(false)\r\n\r\n                    apiGetPreChatMessages(id)\r\n                        .then(res => {\r\n                            setLoadingMessages(false)\r\n                            setMessages(res.data)\r\n                            getSender(res.data)\r\n                            readMessages(res.data)\r\n                        })\r\n                        .catch(e => {\r\n                            setLoading(false)\r\n                        })\r\n\r\n                })\r\n                .catch(e => {\r\n                    setLoading(false)\r\n                })\r\n        }\r\n    }, [id, me.id]);\r\n\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n        setTimeout(() => {\r\n            setIsCoverFade(false)\r\n        }, 500)\r\n    }, [messages.length]);\r\n\r\n    const scrollToBottom = () => {\r\n        if(messagesEnd.current){\r\n            messagesEnd.current.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    const readMessages = msgs => {\r\n        let count = 0,\r\n            arr = []\r\n        msgs.map(item => {\r\n            if(item.senderId !== me.id && item.status != 'read') {\r\n                arr.push(item.id)\r\n            }\r\n            if(item.status === 'pending') count++\r\n        })\r\n\r\n        if(count) {\r\n            apiReadMessages(arr)\r\n                .then(res => {\r\n                    handleChangeUnreadMessages(count)\r\n                })\r\n                .catch(e => {})\r\n        }\r\n    }\r\n\r\n    const getSender = async (msgs) => {\r\n        let senderMsg = msgs.find(item => {\r\n            if(!item.senderId) return null\r\n            return item.senderId !== me.id\r\n        })\r\n        console.log('senderMsg', senderMsg)\r\n        if(senderMsg && senderMsg.senderId) {\r\n            const res = await apiGetUserById(senderMsg.senderId)\r\n            setSender(res.data)\r\n        }\r\n    }\r\n\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            // e.preventDefault()\r\n            // send()\r\n        }\r\n    }\r\n    const send = () => {\r\n        console.log('send', newMessage)\r\n        if(!newMessage) return\r\n        apiSendPreChatMessage(id, {text: newMessage})\r\n            .then(res => {\r\n                setNewMessage('')\r\n                setMessages([...messages, res.data])\r\n                scrollToBottom()\r\n            })\r\n            .catch(e => {\r\n\r\n            })\r\n    }\r\n\r\n\r\n    if(!chat.offerId) chat.offerId = {}\r\n\r\n    return (\r\n        <>\r\n            {!loading ?\r\n                <div style={{height: '100vh'}} >\r\n                    <HeaderChat>\r\n                        <Link href={`/inbox`}>\r\n                            <img src={arrowBack} alt=\"\"/>\r\n                        </Link>\r\n\r\n                        <OfferNameHeaderWrapper>\r\n                            <OfferNameHeader>{chat.offerId.name}</OfferNameHeader>\r\n                            {/*<OfferDates>{chat.offerId.name}</OfferDates>*/}\r\n                        </OfferNameHeaderWrapper>\r\n                        <Link href=\"/offers/[id]\" as={`/offers/${chat.offerId.id}`} shallow>\r\n                            <Details>\r\n                                Details\r\n                            </Details>\r\n                        </Link>\r\n                    </HeaderChat>\r\n                    <WrapperContentMessages >\r\n                        <ProtectMessage>\r\n                            To protect your payments,\r\n                            always communicate and pay through the\r\n                            Talentbooking website.\r\n                        </ProtectMessage>\r\n                        {!loadingMessages ?\r\n                            <ContainerMessages>\r\n                                {isCoverFade &&  <FadeMessages />}\r\n                                {messages.map((item, key) =>\r\n                                    <Message key={key}\r\n                                             message={item}\r\n                                             me={me}\r\n                                             sender={sender}\r\n                                    />\r\n                                )}\r\n                            </ContainerMessages>\r\n                            :\r\n                            <div>Loading...</div>\r\n                        }\r\n                        <div style={{ float:\"left\", clear: \"both\" }} ref={messagesEnd}></div>\r\n                    </WrapperContentMessages>\r\n\r\n\r\n                    <FooterChat>\r\n                        <TextareaMessage\r\n                            placeholder='Write a message'\r\n                            value={newMessage}\r\n                            onChange={e => setNewMessage(e.target.value)}\r\n                            onKeyDown={handleKeyDown}\r\n                        />\r\n                        <SendBtn onClick={send}>Send</SendBtn>\r\n                    </FooterChat>\r\n                </div>\r\n                :\r\n                <>Loading...</>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}