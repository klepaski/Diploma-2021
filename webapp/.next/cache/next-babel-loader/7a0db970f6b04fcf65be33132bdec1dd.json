{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport { apiGetMe, apiGetUnreadMessages } from '../../actions/api';\nimport cookie from \"js-cookie\";\nlet token = cookie.get('token');\nconst MainContext = React.createContext({});\nconst MainConsumer = MainContext.Consumer;\n/* Then create a provider Component */\n\nclass MainProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getMe\", () => {\n      apiGetMe().then(res => {\n        this.setState({\n          me: res.data,\n          checkedMe: true\n        });\n      }).catch(() => {\n        Router.push('/login');\n      });\n    });\n\n    _defineProperty(this, \"getUnreadMessages\", () => {\n      apiGetUnreadMessages().then(res => {\n        this.setState({\n          unreadMessages: res.data\n        });\n      });\n    });\n\n    _defineProperty(this, \"setMe\", me => {\n      let clone = _Object$assign({}, me);\n\n      this.setState({\n        me: me\n      });\n    });\n\n    _defineProperty(this, \"setOffer\", offer => {\n      this.setState({\n        offer: _Object$assign({}, offer)\n      });\n    });\n\n    _defineProperty(this, \"handleChangeUnreadMessages\", (count = 0) => {\n      let unread = this.state.unreadMessages - count;\n      if (unread < 0) unread = 0;\n      this.setState({\n        unreadMessages: unread\n      });\n    });\n\n    _defineProperty(this, \"state\", {\n      me: {},\n      unreadMessages: 0,\n      offer: {\n        categoryOptions: []\n      },\n      checkedMe: false,\n      setMe: this.setMe,\n      setOffer: this.setOffer,\n      handleChangeUnreadMessages: this.handleChangeUnreadMessages,\n      listOffers: []\n    });\n  }\n\n  componentDidMount() {\n    if (token) {\n      this.getMe();\n      this.getUnreadMessages();\n    } else {\n      this.setState({\n        checkedMe: true\n      });\n    }\n  }\n\n  render() {\n    return __jsx(MainContext.Provider, {\n      value: this.state\n    }, this.props.children);\n  }\n\n} // MainProvider.getInitialProps = async ({ req }) => {\n//     const node_env = process.env.NODE_ENV\n//     console.log('test', node_env)\n//     const host =  req.headers.host\n//     return { node_env }\n// }\n\n\nexport default MainProvider;\nexport { MainConsumer, MainContext };","map":{"version":3,"sources":["D:/git/webapp3/webapp/components/contextProviders/MainContext.js"],"names":["React","Component","Router","apiGetMe","apiGetUnreadMessages","cookie","token","get","MainContext","createContext","MainConsumer","Consumer","MainProvider","then","res","setState","me","data","checkedMe","catch","push","unreadMessages","clone","offer","count","unread","state","categoryOptions","setMe","setOffer","handleChangeUnreadMessages","listOffers","componentDidMount","getMe","getUnreadMessages","render","props","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAAQC,QAAR,EAAkBC,oBAAlB,QAA6C,mBAA7C;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,IAAIC,KAAK,GAAGD,MAAM,CAACE,GAAP,CAAW,OAAX,CAAZ;AAEA,MAAMC,WAAW,GAAGR,KAAK,CAACS,aAAN,CAAoB,EAApB,CAApB;AACA,MAAMC,YAAY,GAAGF,WAAW,CAACG,QAAjC;AAEA;;AACA,MAAMC,YAAN,SAA2BX,SAA3B,CAAqC;AAAA;AAAA;;AAAA,mCACzB,MAAM;AACVE,MAAAA,QAAQ,GACHU,IADL,CACWC,GAAD,IAAS;AACX,aAAKC,QAAL,CAAc;AAACC,UAAAA,EAAE,EAAEF,GAAG,CAACG,IAAT;AAAeC,UAAAA,SAAS,EAAE;AAA1B,SAAd;AACH,OAHL,EAIKC,KAJL,CAIW,MAAM;AACTjB,QAAAA,MAAM,CAACkB,IAAP,CAAY,QAAZ;AACH,OANL;AAQH,KAVgC;;AAAA,+CAYb,MAAM;AACtBhB,MAAAA,oBAAoB,GACfS,IADL,CACWC,GAAD,IAAS;AACX,aAAKC,QAAL,CAAc;AAACM,UAAAA,cAAc,EAAEP,GAAG,CAACG;AAArB,SAAd;AACH,OAHL;AAIH,KAjBgC;;AAAA,mCAqBzBD,EAAE,IAAI;AACV,UAAIM,KAAK,GAAG,eAAc,EAAd,EAAkBN,EAAlB,CAAZ;;AACA,WAAKD,QAAL,CAAc;AAACC,QAAAA,EAAE,EAAEA;AAAL,OAAd;AACH,KAxBgC;;AAAA,sCA0BtBO,KAAK,IAAI;AAChB,WAAKR,QAAL,CAAc;AAACQ,QAAAA,KAAK,EAAE,eAAc,EAAd,EAAkBA,KAAlB;AAAR,OAAd;AACH,KA5BgC;;AAAA,wDA8BJ,CAACC,KAAK,GAAG,CAAT,KAAe;AACxC,UAAIC,MAAM,GAAI,KAAKC,KAAL,CAAWL,cAAX,GAA4BG,KAA1C;AACI,UAAGC,MAAM,GAAG,CAAZ,EAAeA,MAAM,GAAG,CAAT;AACnB,WAAKV,QAAL,CAAc;AAACM,QAAAA,cAAc,EAAEI;AAAjB,OAAd;AACH,KAlCgC;;AAAA,mCAoCzB;AACJT,MAAAA,EAAE,EAAE,EADA;AAEJK,MAAAA,cAAc,EAAE,CAFZ;AAGJE,MAAAA,KAAK,EAAE;AACHI,QAAAA,eAAe,EAAE;AADd,OAHH;AAMJT,MAAAA,SAAS,EAAE,KANP;AAOJU,MAAAA,KAAK,EAAE,KAAKA,KAPR;AAQJC,MAAAA,QAAQ,EAAE,KAAKA,QARX;AASJC,MAAAA,0BAA0B,EAAE,KAAKA,0BAT7B;AAUJC,MAAAA,UAAU,EAAE;AAVR,KApCyB;AAAA;;AAiDjCC,EAAAA,iBAAiB,GAAG;AAChB,QAAG1B,KAAH,EAAU;AACN,WAAK2B,KAAL;AACA,WAAKC,iBAAL;AACH,KAHD,MAGO;AACH,WAAKnB,QAAL,CAAc;AAACG,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACH;AACJ;;AAEDiB,EAAAA,MAAM,GAAI;AACN,WACI,MAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,KAAKT;AAAlC,OACK,KAAKU,KAAL,CAAWC,QADhB,CADJ;AAKH;;AAhEgC,C,CAmErC;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAezB,YAAf;AACA,SAAQF,YAAR,EAAsBF,WAAtB","sourcesContent":["import React, { Component } from 'react'\r\nimport Router from 'next/router'\r\n\r\nimport {apiGetMe, apiGetUnreadMessages} from '../../actions/api'\r\nimport cookie from \"js-cookie\";\r\nlet token = cookie.get('token')\r\n\r\nconst MainContext = React.createContext({})\r\nconst MainConsumer = MainContext.Consumer\r\n\r\n/* Then create a provider Component */\r\nclass MainProvider extends Component {\r\n    getMe = () => {\r\n        apiGetMe()\r\n            .then((res) => {\r\n                this.setState({me: res.data, checkedMe: true});\r\n            })\r\n            .catch(() => {\r\n                Router.push('/login')\r\n            });\r\n\r\n    };\r\n\r\n    getUnreadMessages = () => {\r\n        apiGetUnreadMessages()\r\n            .then((res) => {\r\n                this.setState({unreadMessages: res.data});\r\n            })\r\n    };\r\n\r\n\r\n\r\n    setMe = me => {\r\n        let clone = Object.assign({}, me);\r\n        this.setState({me: me})\r\n    }\r\n\r\n    setOffer = offer => {\r\n        this.setState({offer: Object.assign({}, offer)})\r\n    }\r\n\r\n    handleChangeUnreadMessages = (count = 0) => {\r\n        let unread  = this.state.unreadMessages - count;\r\n            if(unread < 0) unread = 0;\r\n        this.setState({unreadMessages: unread})\r\n    }\r\n\r\n    state = {\r\n        me: {},\r\n        unreadMessages: 0,\r\n        offer: {\r\n            categoryOptions: []\r\n        },\r\n        checkedMe: false,\r\n        setMe: this.setMe,\r\n        setOffer: this.setOffer,\r\n        handleChangeUnreadMessages: this.handleChangeUnreadMessages,\r\n        listOffers: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(token) {\r\n            this.getMe()\r\n            this.getUnreadMessages()\r\n        } else {\r\n            this.setState({checkedMe: true})\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <MainContext.Provider value={this.state} >\r\n                {this.props.children}\r\n            </MainContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n// MainProvider.getInitialProps = async ({ req }) => {\r\n//     const node_env = process.env.NODE_ENV\r\n//     console.log('test', node_env)\r\n//     const host =  req.headers.host\r\n//     return { node_env }\r\n// }\r\n\r\nexport default MainProvider\r\nexport {MainConsumer, MainContext}\r\n\r\n"]},"metadata":{},"sourceType":"module"}