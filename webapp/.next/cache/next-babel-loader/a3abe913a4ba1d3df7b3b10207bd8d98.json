{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport Cropper from 'react-easy-crop';\nimport AvatarEditor from 'react-avatar-editor';\nimport 'cropperjs/dist/cropper.css';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { ArrowLeft, UploadImg } from '../StyledComponents/Icon';\nimport { Text } from '../StyledComponents/Text';\nimport { WrapperHeight } from '../StyledComponents/Wrapper';\nimport { modifySrc } from '../../utils/modifySrc';\nimport { TextArea } from '../controls/Input/Input';\nimport { CoverPhotoPreview } from './Photo';\n\nconst EditPhoto = ({\n  handleBack,\n  handleRotate,\n  handleDelete,\n  photo,\n  keyPhoto,\n  onChangePhotoDescription,\n  hidedenDescription,\n  loadingEdit\n}) => {\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const editorRef = useRef(null);\n  const {\n    0: rotateDeg,\n    1: setRotateDeg\n  } = useState(0);\n  const {\n    0: image,\n    1: setImage\n  } = useState({});\n  const {\n    0: width,\n    1: setWidth\n  } = useState(0);\n  const {\n    0: height,\n    1: setHeight\n  } = useState(0);\n  const {\n    0: croppedImageUrl,\n    1: setCroppedImageUrl\n  } = useState(null);\n  const {\n    0: blob,\n    1: setBlob\n  } = useState(null); // const [crop, setCrop] = useState({ aspect: 16 / 9 })\n\n  const {\n    0: crop,\n    1: setCrop\n  } = useState({\n    x: 0,\n    y: 0\n  });\n  const {\n    0: zoom,\n    1: setZoom\n  } = useState(1);\n  const {\n    0: croppedAreaPixels,\n    1: setCroppedAreaPixels\n  } = useState(null);\n  const {\n    0: croppedImage,\n    1: setCroppedImage\n  } = useState(null);\n  const {\n    0: cropLoading,\n    1: setCropLoading\n  } = useState(false);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    console.log(croppedArea, croppedAreaPixels);\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n  const editImage = photo.preview ? photo.preview : modifySrc(photo.photoUrl, 'offer'); // let imageRef = useRef(null)\n\n  const handleChangeStep = () => {\n    if (step === 1 || step === 2) {\n      setStep(0);\n      return;\n    }\n\n    handleBack();\n  };\n\n  useEffect(() => {\n    let src = photo.preview ? photo.preview : modifySrc(photo.photoUrl);\n    photo.src = src;\n    let img = new Image();\n    img.src = src;\n\n    img.onload = function () {\n      setWidth(this.width);\n      setHeight(this.height);\n      setImage(photo);\n    };\n  }, []);\n\n  const rotateLeft = e => {\n    e.preventDefault();\n    setRotateDeg(rotateDeg - 90);\n  };\n\n  const rotateRight = e => {\n    e.preventDefault();\n    setRotateDeg(rotateDeg + 90);\n  };\n\n  const handlePositionChange = e => {};\n\n  const applyRotate = () => {\n    if (rotateDeg === 0) {\n      handleBack();\n      return;\n    }\n\n    if (image) {\n      const url = editorRef.current.getImageScaledToCanvas().toDataURL();\n      editorRef.current.getImageScaledToCanvas().toBlob(function (blob) {\n        // return blob;\n        handleRotate(blob, url, keyPhoto);\n      }.bind(this), 'image/jpeg', 1);\n    }\n  }; // const applyCrop = () => {\n  //     handleRotate(blob, croppedImageUrl, keyPhoto)\n  // }\n\n\n  const applyCrop = useCallback(async () => {\n    setCropLoading(true);\n\n    try {\n      const croppedImage = await getCroppedImg(editImage, croppedAreaPixels);\n      console.log('donee', croppedImage);\n      setCropLoading(false);\n      handleRotate(croppedImage, croppedImage, keyPhoto);\n    } catch (e) {\n      console.error(e);\n      setCropLoading(false);\n    }\n  }, [croppedAreaPixels]);\n  let styleCanvas = {\n    width: width,\n    height: height\n  };\n  const styleImg = {\n    width: '100%',\n    height: '100%',\n    background: `url(${image.src}) center center / contain no-repeat`,\n    transform: `rotate(${rotateDeg}deg)`\n  }; // const onChangeCrop = crop => {\n  //     setCrop(crop);\n  // };\n  // const onCropComplete = crop => {\n  //     makeClientCrop(crop);\n  // };\n  // const onImageLoaded = image => {\n  //     // imageRef = image;\n  // };\n  // const makeClientCrop = async crop => {\n  //     if (imageRef.current && crop.width && crop.height) {\n  //         const croppedImageBlob = await getCroppedImg(\n  //             imageRef.current.imageRef,\n  //             crop,\n  //             'newFile.jpeg'\n  //         );\n  //         setBlob(croppedImageBlob)\n  //         let croppedImageUrl = window.URL.createObjectURL(croppedImageBlob);\n  //         // window.URL.revokeObjectURL(this.fileUrl);\n  //         setCroppedImageUrl(croppedImageUrl);\n  //     }\n  // }\n  // const getCroppedImg = async (image, crop, fileName) => {\n  //     const canvas = document.createElement('canvas');\n  //     const scaleX = image.naturalWidth / image.width;\n  //     const scaleY = image.naturalHeight / image.height;\n  //     canvas.width = Math.ceil(crop.width*scaleX);\n  //     canvas.height = Math.ceil(crop.height*scaleY);\n  //     const ctx = canvas.getContext('2d');\n  //\n  //     console.log('ctx', ctx)\n  //\n  //\n  //     ctx.drawImage(\n  //         image,\n  //         crop.x * scaleX,\n  //         crop.y * scaleY,\n  //         crop.width * scaleX,\n  //         crop.height * scaleY,\n  //         0,\n  //         0,\n  //         crop.width*scaleX,\n  //         crop.height*scaleY\n  //\n  //     );\n  //\n  //     return new Promise((resolve, reject) => {\n  //         canvas.toBlob(blob => {\n  //             if (!blob) {\n  //                 console.error('Canvas is empty');\n  //                 return;\n  //             }\n  //\n  //             blob.name = fileName;\n  //             resolve(blob)\n  //             // this.fileUrl = window.URL.createObjectURL(blob);\n  //             // window.URL.revokeObjectURL(this.fileUrl);\n  //             // resolve(this.fileUrl);\n  //         }, 'image/jpeg');\n  //     });\n  // }\n\n  return __jsx(React.Fragment, null, __jsx(WrapperHeight, null, __jsx(\"div\", {\n    className: 'z-photo-edit-header'\n  }, step !== 2 && __jsx(\"div\", {\n    className: \"display-flex\",\n    onClick: () => handleChangeStep()\n  }, __jsx(ArrowLeft, {\n    mr: 15\n  }), __jsx(Text, {\n    fz: 14\n  }, step === 0 && __jsx(React.Fragment, null, \"Description\"), step === 1 && __jsx(React.Fragment, null, \"Rotate photo\"), step === 2 && __jsx(React.Fragment, null, \"Crop photo\"))), step === 0 && __jsx(\"div\", {\n    className: \"display-flex\"\n  }, __jsx(\"div\", {\n    className: \"edit-photo-\\u0441hange-item\",\n    onClick: () => setStep(1)\n  }, \"rotate\"), __jsx(\"div\", {\n    className: \"edit-photo-\\u0441hange-item\",\n    onClick: () => setStep(2)\n  }, \"crop\"))), step === 0 && __jsx(React.Fragment, null, __jsx(CoverPhotoPreview, {\n    src: photo.preview ? photo.preview : modifySrc(photo.photoUrl, 'offer'),\n    mb: 40\n  }), !hidedenDescription && __jsx(TextArea, {\n    name: \"describe\",\n    value: photo.description || '',\n    onChange: e => onChangePhotoDescription(photo.id, e.target.value),\n    height: 90,\n    count: photo.description ? photo.description.length : '',\n    maxLength: 100,\n    placeholder: \"Add a short description of the photo, explain it to potential Clients\"\n  })), step === 1 && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"photo-rotate-container\"\n  }, __jsx(\"div\", {\n    className: \"photo-rotate-wrapper\"\n  }, __jsx(\"div\", {\n    className: \"photo-rotate-item\",\n    style: styleImg\n  }))), __jsx(\"div\", {\n    className: \"z-avatar-editor-wrapper\"\n  }, __jsx(AvatarEditor, {\n    ref: editorRef,\n    scale: 1,\n    width: width,\n    height: height,\n    onPositionChange: handlePositionChange,\n    rotate: rotateDeg,\n    borderRadius: 0,\n    color: [0, 0, 0, 0],\n    style: styleCanvas,\n    image: image.src\n  }))), step === 2 && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"crop-container\"\n  }, __jsx(Cropper, {\n    image: editImage // image=\"https://thumbs.dreamstime.com/z/black-white-vertical-new-york-flatiron-building-stands-right-heart-manhattan-intersection-two-famous-nyc-landmarks-45486075.jpg\"\n    ,\n    crop: crop,\n    zoom: zoom,\n    aspect: 16 / 9,\n    onCropChange: setCrop,\n    onCropComplete: onCropComplete,\n    onZoomChange: setZoom\n  })))), __jsx(\"div\", {\n    className: \"edit-photo-footer\"\n  }, step === 0 && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"edit-photo-delete-item\",\n    onClick: () => handleDelete(keyPhoto)\n  }, \"Delete this photo\")), step === 1 && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"edit-photo-footer-item\",\n    onClick: e => rotateRight(e)\n  }, \"Rotate\"), __jsx(\"div\", {\n    className: \"edit-photo-footer-item\",\n    onClick: () => applyRotate()\n  }, loadingEdit ? 'Loading...' : 'Apply')), step === 2 && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"edit-photo-footer-item\",\n    onClick: () => handleChangeStep()\n  }, \"Cancel\"), __jsx(\"div\", {\n    className: \"edit-photo-footer-item\",\n    onClick: () => applyCrop()\n  }, loadingEdit || cropLoading ? 'Loading...' : 'Apply'))));\n};\n\nexport default EditPhoto;\n\nconst createImage = url => new _Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener('load', () => resolve(image));\n  image.addEventListener('error', error => reject(error));\n  image.setAttribute('crossOrigin', 'anonymous'); // needed to avoid cross-origin issues on CodeSandbox\n\n  image.src = url;\n});\n\nfunction getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n\nconst getCroppedImg = async (imageSrc, pixelCrop, rotation = 0) => {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * (maxSize / 2 * Math.sqrt(2)); // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n\n  canvas.width = safeArea;\n  canvas.height = safeArea; // translate canvas context to a central location on image to allow rotating around the center.\n\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2); // draw rotated image and store data.\n\n  ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5);\n  const data = ctx.getImageData(0, 0, safeArea, safeArea); // set canvas width to final desired crop size - this will clear existing context\n\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height; // paste generated rotate image with correct offsets for x,y crop values.\n\n  ctx.putImageData(data, 0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x, 0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y); // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n  // As a blob\n\n  return new _Promise(resolve => {\n    canvas.toBlob(file => {\n      resolve(file, URL.createObjectURL(file));\n    }, 'image/jpeg');\n  });\n};","map":{"version":3,"sources":["D:/4/диплом/webapp — копия/components/Photo/EditPhoto.js"],"names":["React","useRef","useState","useEffect","useCallback","Cropper","AvatarEditor","ReactCrop","ArrowLeft","UploadImg","Text","WrapperHeight","modifySrc","TextArea","CoverPhotoPreview","EditPhoto","handleBack","handleRotate","handleDelete","photo","keyPhoto","onChangePhotoDescription","hidedenDescription","loadingEdit","step","setStep","editorRef","rotateDeg","setRotateDeg","image","setImage","width","setWidth","height","setHeight","croppedImageUrl","setCroppedImageUrl","blob","setBlob","crop","setCrop","x","y","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","croppedImage","setCroppedImage","cropLoading","setCropLoading","onCropComplete","croppedArea","console","log","editImage","preview","photoUrl","handleChangeStep","src","img","Image","onload","rotateLeft","e","preventDefault","rotateRight","handlePositionChange","applyRotate","url","current","getImageScaledToCanvas","toDataURL","toBlob","bind","applyCrop","getCroppedImg","error","styleCanvas","styleImg","background","transform","description","id","target","value","length","createImage","resolve","reject","addEventListener","setAttribute","getRadianAngle","degreeValue","Math","PI","imageSrc","pixelCrop","rotation","canvas","document","createElement","ctx","getContext","maxSize","max","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","file","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react'\r\nimport Cropper from 'react-easy-crop'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport 'cropperjs/dist/cropper.css'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n\r\nimport { ArrowLeft, UploadImg } from '../StyledComponents/Icon'\r\nimport { Text } from '../StyledComponents/Text'\r\nimport { WrapperHeight } from '../StyledComponents/Wrapper'\r\nimport { modifySrc } from '../../utils/modifySrc'\r\nimport { TextArea } from '../controls/Input/Input'\r\nimport { CoverPhotoPreview } from './Photo'\r\n\r\nconst EditPhoto = ({\r\n  handleBack,\r\n  handleRotate,\r\n  handleDelete,\r\n  photo,\r\n  keyPhoto,\r\n  onChangePhotoDescription,\r\n  hidedenDescription,\r\n  loadingEdit,\r\n}) => {\r\n  const [step, setStep] = useState(0)\r\n  const editorRef = useRef(null)\r\n  const [rotateDeg, setRotateDeg] = useState(0)\r\n  const [image, setImage] = useState({})\r\n  const [width, setWidth] = useState(0)\r\n  const [height, setHeight] = useState(0)\r\n\r\n  const [croppedImageUrl, setCroppedImageUrl] = useState(null)\r\n  const [blob, setBlob] = useState(null)\r\n  // const [crop, setCrop] = useState({ aspect: 16 / 9 })\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 })\r\n  const [zoom, setZoom] = useState(1)\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null)\r\n  const [croppedImage, setCroppedImage] = useState(null)\r\n  const [cropLoading, setCropLoading] = useState(false)\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    console.log(croppedArea, croppedAreaPixels)\r\n    setCroppedAreaPixels(croppedAreaPixels)\r\n  }, [])\r\n\r\n  const editImage = photo.preview ? photo.preview : modifySrc(photo.photoUrl, 'offer')\r\n\r\n  // let imageRef = useRef(null)\r\n\r\n  const handleChangeStep = () => {\r\n    if (step === 1 || step === 2) {\r\n      setStep(0)\r\n      return\r\n    }\r\n    handleBack()\r\n  }\r\n\r\n  useEffect(() => {\r\n    let src = photo.preview ? photo.preview : modifySrc(photo.photoUrl)\r\n    photo.src = src\r\n    let img = new Image()\r\n    img.src = src\r\n    img.onload = function () {\r\n      setWidth(this.width)\r\n      setHeight(this.height)\r\n      setImage(photo)\r\n    }\r\n  }, [])\r\n  const rotateLeft = (e) => {\r\n    e.preventDefault()\r\n    setRotateDeg(rotateDeg - 90)\r\n  }\r\n  const rotateRight = (e) => {\r\n    e.preventDefault()\r\n    setRotateDeg(rotateDeg + 90)\r\n  }\r\n  const handlePositionChange = (e) => {}\r\n  const applyRotate = () => {\r\n    if (rotateDeg === 0) {\r\n      handleBack()\r\n      return\r\n    }\r\n    if (image) {\r\n      const url = editorRef.current.getImageScaledToCanvas().toDataURL()\r\n      editorRef.current.getImageScaledToCanvas().toBlob(\r\n        function (blob) {\r\n          // return blob;\r\n          handleRotate(blob, url, keyPhoto)\r\n        }.bind(this),\r\n        'image/jpeg',\r\n        1,\r\n      )\r\n    }\r\n  }\r\n  // const applyCrop = () => {\r\n  //     handleRotate(blob, croppedImageUrl, keyPhoto)\r\n  // }\r\n  const applyCrop = useCallback(async () => {\r\n    setCropLoading(true)\r\n    try {\r\n      const croppedImage = await getCroppedImg(editImage, croppedAreaPixels)\r\n      console.log('donee', croppedImage)\r\n      setCropLoading(false)\r\n      handleRotate(croppedImage, croppedImage, keyPhoto)\r\n    } catch (e) {\r\n      console.error(e)\r\n      setCropLoading(false)\r\n    }\r\n  }, [croppedAreaPixels])\r\n\r\n  let styleCanvas = {\r\n    width: width,\r\n    height: height,\r\n  }\r\n  const styleImg = {\r\n    width: '100%',\r\n    height: '100%',\r\n    background: `url(${image.src}) center center / contain no-repeat`,\r\n    transform: `rotate(${rotateDeg}deg)`,\r\n  }\r\n\r\n  // const onChangeCrop = crop => {\r\n  //     setCrop(crop);\r\n  // };\r\n  // const onCropComplete = crop => {\r\n  //     makeClientCrop(crop);\r\n  // };\r\n  // const onImageLoaded = image => {\r\n  //     // imageRef = image;\r\n  // };\r\n\r\n  // const makeClientCrop = async crop => {\r\n  //     if (imageRef.current && crop.width && crop.height) {\r\n  //         const croppedImageBlob = await getCroppedImg(\r\n  //             imageRef.current.imageRef,\r\n  //             crop,\r\n  //             'newFile.jpeg'\r\n  //         );\r\n  //         setBlob(croppedImageBlob)\r\n  //         let croppedImageUrl = window.URL.createObjectURL(croppedImageBlob);\r\n  //         // window.URL.revokeObjectURL(this.fileUrl);\r\n  //         setCroppedImageUrl(croppedImageUrl);\r\n  //     }\r\n  // }\r\n\r\n  // const getCroppedImg = async (image, crop, fileName) => {\r\n  //     const canvas = document.createElement('canvas');\r\n  //     const scaleX = image.naturalWidth / image.width;\r\n  //     const scaleY = image.naturalHeight / image.height;\r\n  //     canvas.width = Math.ceil(crop.width*scaleX);\r\n  //     canvas.height = Math.ceil(crop.height*scaleY);\r\n  //     const ctx = canvas.getContext('2d');\r\n  //\r\n  //     console.log('ctx', ctx)\r\n  //\r\n  //\r\n  //     ctx.drawImage(\r\n  //         image,\r\n  //         crop.x * scaleX,\r\n  //         crop.y * scaleY,\r\n  //         crop.width * scaleX,\r\n  //         crop.height * scaleY,\r\n  //         0,\r\n  //         0,\r\n  //         crop.width*scaleX,\r\n  //         crop.height*scaleY\r\n  //\r\n  //     );\r\n  //\r\n  //     return new Promise((resolve, reject) => {\r\n  //         canvas.toBlob(blob => {\r\n  //             if (!blob) {\r\n  //                 console.error('Canvas is empty');\r\n  //                 return;\r\n  //             }\r\n  //\r\n  //             blob.name = fileName;\r\n  //             resolve(blob)\r\n  //             // this.fileUrl = window.URL.createObjectURL(blob);\r\n  //             // window.URL.revokeObjectURL(this.fileUrl);\r\n  //             // resolve(this.fileUrl);\r\n  //         }, 'image/jpeg');\r\n  //     });\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <WrapperHeight>\r\n        <div className={'z-photo-edit-header'}>\r\n          {step !== 2 && (\r\n            <div className=\"display-flex\" onClick={() => handleChangeStep()}>\r\n              <ArrowLeft mr={15} />\r\n              <Text fz={14}>\r\n                {step === 0 && <>Description</>}\r\n                {step === 1 && <>Rotate photo</>}\r\n                {step === 2 && <>Crop photo</>}\r\n              </Text>\r\n            </div>\r\n          )}\r\n          {step === 0 && (\r\n            <div className=\"display-flex\">\r\n              <div className=\"edit-photo-сhange-item\" onClick={() => setStep(1)}>\r\n                rotate\r\n              </div>\r\n              <div className=\"edit-photo-сhange-item\" onClick={() => setStep(2)}>\r\n                crop\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {step === 0 && (\r\n          <>\r\n            <CoverPhotoPreview\r\n              src={photo.preview ? photo.preview : modifySrc(photo.photoUrl, 'offer')}\r\n              mb={40}\r\n            />\r\n\r\n            {!hidedenDescription && (\r\n              <TextArea\r\n                name=\"describe\"\r\n                value={photo.description || ''}\r\n                onChange={(e) => onChangePhotoDescription(photo.id, e.target.value)}\r\n                height={90}\r\n                count={photo.description ? photo.description.length : ''}\r\n                maxLength={100}\r\n                placeholder=\"Add a short description of the photo, explain it to potential Clients\"\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {step === 1 && (\r\n          <>\r\n            <div className=\"photo-rotate-container\">\r\n              <div className=\"photo-rotate-wrapper\">\r\n                <div className=\"photo-rotate-item\" style={styleImg}></div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"z-avatar-editor-wrapper\">\r\n              <AvatarEditor\r\n                ref={editorRef}\r\n                scale={1}\r\n                width={width}\r\n                height={height}\r\n                onPositionChange={handlePositionChange}\r\n                rotate={rotateDeg}\r\n                borderRadius={0}\r\n                color={[0, 0, 0, 0]}\r\n                style={styleCanvas}\r\n                image={image.src}\r\n              />\r\n            </div>\r\n          </>\r\n        )}\r\n        {step === 2 && (\r\n          <>\r\n            <div className=\"crop-container\">\r\n              <Cropper\r\n                image={editImage}\r\n                // image=\"https://thumbs.dreamstime.com/z/black-white-vertical-new-york-flatiron-building-stands-right-heart-manhattan-intersection-two-famous-nyc-landmarks-45486075.jpg\"\r\n                crop={crop}\r\n                zoom={zoom}\r\n                aspect={16 / 9}\r\n                onCropChange={setCrop}\r\n                onCropComplete={onCropComplete}\r\n                onZoomChange={setZoom}\r\n              />\r\n            </div>\r\n\r\n            {/*<ReactCrop*/}\r\n            {/*    ref={imageRef}*/}\r\n            {/*    src={photo.preview ? photo.preview : modifySrc(photo.photoUrl, 'offer')}*/}\r\n            {/*    crop={crop}*/}\r\n            {/*    onImageLoaded={onImageLoaded}*/}\r\n            {/*    onComplete={onCropComplete}*/}\r\n            {/*    onChange={onChangeCrop}*/}\r\n            {/*/>*/}\r\n\r\n            {/*{croppedImageUrl && (*/}\r\n            {/*    <div className=\"z-cropped-wrapper\">*/}\r\n            {/*        <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />*/}\r\n            {/*    </div>*/}\r\n            {/*)}*/}\r\n          </>\r\n        )}\r\n      </WrapperHeight>\r\n\r\n      <div className=\"edit-photo-footer\">\r\n        {step === 0 && (\r\n          <>\r\n            <div className=\"edit-photo-delete-item\" onClick={() => handleDelete(keyPhoto)}>\r\n              Delete this photo\r\n            </div>\r\n            {/*<div className='edit-photo-footer-item' onClick={() => handleDelete(keyPhoto)}>Delete this photo</div>*/}\r\n          </>\r\n        )}\r\n        {step === 1 && (\r\n          <>\r\n            <div className=\"edit-photo-footer-item\" onClick={(e) => rotateRight(e)}>\r\n              Rotate\r\n            </div>\r\n            <div className=\"edit-photo-footer-item\" onClick={() => applyRotate()}>\r\n              {loadingEdit ? 'Loading...' : 'Apply'}\r\n            </div>\r\n          </>\r\n        )}\r\n        {step === 2 && (\r\n          <>\r\n            <div className=\"edit-photo-footer-item\" onClick={() => handleChangeStep()}>\r\n              Cancel\r\n            </div>\r\n            <div className=\"edit-photo-footer-item\" onClick={() => applyCrop()}>\r\n              {loadingEdit || cropLoading ? 'Loading...' : 'Apply'}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditPhoto\r\n\r\nconst createImage = (url) =>\r\n  new Promise((resolve, reject) => {\r\n    const image = new Image()\r\n    image.addEventListener('load', () => resolve(image))\r\n    image.addEventListener('error', (error) => reject(error))\r\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\r\n    image.src = url\r\n  })\r\n\r\nfunction getRadianAngle(degreeValue) {\r\n  return (degreeValue * Math.PI) / 180\r\n}\r\n\r\nconst getCroppedImg = async (imageSrc, pixelCrop, rotation = 0) => {\r\n  const image = await createImage(imageSrc)\r\n  const canvas = document.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  const maxSize = Math.max(image.width, image.height)\r\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\r\n\r\n  // set each dimensions to double largest dimension to allow for a safe area for the\r\n  // image to rotate in without being clipped by canvas context\r\n  canvas.width = safeArea\r\n  canvas.height = safeArea\r\n\r\n  // translate canvas context to a central location on image to allow rotating around the center.\r\n  ctx.translate(safeArea / 2, safeArea / 2)\r\n  ctx.rotate(getRadianAngle(rotation))\r\n  ctx.translate(-safeArea / 2, -safeArea / 2)\r\n\r\n  // draw rotated image and store data.\r\n  ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5)\r\n  const data = ctx.getImageData(0, 0, safeArea, safeArea)\r\n\r\n  // set canvas width to final desired crop size - this will clear existing context\r\n  canvas.width = pixelCrop.width\r\n  canvas.height = pixelCrop.height\r\n\r\n  // paste generated rotate image with correct offsets for x,y crop values.\r\n  ctx.putImageData(\r\n    data,\r\n    0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\r\n    0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y,\r\n  )\r\n\r\n  // As Base64 string\r\n  // return canvas.toDataURL('image/jpeg');\r\n\r\n  // As a blob\r\n  return new Promise((resolve) => {\r\n    canvas.toBlob((file) => {\r\n      resolve(file, URL.createObjectURL(file))\r\n    }, 'image/jpeg')\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}