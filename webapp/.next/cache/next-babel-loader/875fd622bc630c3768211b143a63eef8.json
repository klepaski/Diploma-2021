{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useContext, useEffect, useMemo } from 'react';\nimport { Label } from \"./../../Layouts/styledLayouts\";\nimport { Input, TextArea } from \"../../controls/Input/Input\";\nimport { Tab } from \"../../controls/Tabs/Tabs\";\nimport Select from \"../../controls/Select/Select\";\nimport { Button } from \"../../controls/Button/Button\";\nimport { addOrRemove, isIncludesThisId } from \"../../../utils/utils\"; // import {listCountries} from \"../../../utils/countriesLanguages\";\n\nconst listCountries = [{\n  value: 'United Arab Emirates',\n  label: 'United Arab Emirates'\n}, {\n  value: 'Saudi Arabia',\n  label: 'Saudi Arabia'\n}];\nexport default (({\n  offer,\n  onChange,\n  listCategories,\n  listEventTypes,\n  isLoading,\n  onSave\n}) => {\n  const {\n    0: listSubCategories,\n    1: setListSubCategories\n  } = useState([]);\n  const listParentCategories = useMemo(() => listCategories.filter(item => !item.parentCategory), [listCategories]);\n  if (!offer.summary) offer.summary = '';\n  useEffect(() => {\n    listCategories.map(item => {\n      if (item.id === offer.category.id) {\n        setActiveCategory(item);\n      }\n    });\n  }, []);\n\n  const setActiveCategory = category => {\n    onChange({\n      target: {\n        name: 'category',\n        value: category\n      }\n    });\n    let listSubc = listCategories.filter(item => item.parentCategory && item.parentCategory.id === category.id);\n    setListSubCategories(listSubc);\n    setActiveSubCategory({});\n  };\n\n  const setActiveSubCategory = subCategory => {\n    onChange({\n      target: {\n        name: 'subCategory',\n        value: subCategory\n      }\n    });\n  };\n\n  const handleChangeCountry = country => {\n    onChange({\n      target: {\n        name: 'country',\n        value: country\n      }\n    });\n  };\n\n  const toggleItem = item => {\n    let arr = addOrRemove(offer.type, item);\n    onChange({\n      target: {\n        name: 'type',\n        value: arr\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Label, null, \"Name your offer\"), __jsx(Input, {\n    name: \"name\",\n    value: offer.name,\n    onChange: onChange,\n    mb: 30,\n    placeholder: \"Ex.: Singing opera\"\n  }), __jsx(Label, null, \"Add a short summary of the offer\"), __jsx(TextArea, {\n    name: \"summary\",\n    value: offer.summary,\n    onChange: onChange,\n    height: 95,\n    count: offer.summary ? offer.summary.length : '',\n    placeholder: \"Ex.: Singing rock opera covers of the hits \"\n  }), __jsx(Label, {\n    mt: 20\n  }, \"What is the category of your programmer?\"), listParentCategories.length ? __jsx(React.Fragment, null, listParentCategories.map((item, key) => {\n    return __jsx(Tab, {\n      key: key,\n      title: item.category,\n      onClick: () => setActiveCategory(item),\n      active: item.id == offer.category.id\n    });\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", null, \"Loading...\")), offer.category.id && !!listSubCategories.length && __jsx(React.Fragment, null, __jsx(Label, {\n    mt: 40\n  }, \"Choose the technology/language you use\"), listSubCategories.map((item, key) => __jsx(Tab, {\n    key: key,\n    title: item.category,\n    onClick: () => setActiveSubCategory(item),\n    active: item.id == offer.subCategory.id\n  }))), __jsx(Button, {\n    green: true,\n    loading: isLoading,\n    onClick: onSave,\n    mt: 70\n  }, \"Save\"));\n});","map":{"version":3,"sources":["D:/4/диплом/webapp — копия/components/Offer/edit/Main.js"],"names":["React","useState","useContext","useEffect","useMemo","Label","Input","TextArea","Tab","Select","Button","addOrRemove","isIncludesThisId","listCountries","value","label","offer","onChange","listCategories","listEventTypes","isLoading","onSave","listSubCategories","setListSubCategories","listParentCategories","filter","item","parentCategory","summary","map","id","category","setActiveCategory","target","name","listSubc","setActiveSubCategory","subCategory","handleChangeCountry","country","toggleItem","arr","type","length","key"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect, useMemo} from 'react';\r\n\r\nimport {Label} from \"./../../Layouts/styledLayouts\";\r\nimport {Input, TextArea} from \"../../controls/Input/Input\";\r\nimport {Tab} from \"../../controls/Tabs/Tabs\";\r\nimport Select from \"../../controls/Select/Select\";\r\nimport {Button} from \"../../controls/Button/Button\";\r\nimport {addOrRemove, isIncludesThisId} from \"../../../utils/utils\";\r\n\r\n// import {listCountries} from \"../../../utils/countriesLanguages\";\r\nconst listCountries = [\r\n    {value: 'United Arab Emirates', label: 'United Arab Emirates'},\r\n    {value: 'Saudi Arabia', label: 'Saudi Arabia'}\r\n]\r\n\r\nexport default ({offer, onChange, listCategories, listEventTypes, isLoading, onSave}) => {\r\n    const [listSubCategories, setListSubCategories] = useState([])\r\n    const listParentCategories = useMemo(() => listCategories.filter(item => !item.parentCategory), [listCategories]);\r\n\r\n    if(!offer.summary) offer.summary = ''\r\n\r\n\r\n    useEffect(() => {\r\n        listCategories.map(item => {\r\n            if(item.id === offer.category.id) {\r\n                setActiveCategory(item)\r\n            }\r\n        })\r\n    }, []);\r\n\r\n\r\n    const setActiveCategory = category => {\r\n        onChange( {target: {name: 'category', value: category}})\r\n        let listSubc = listCategories.filter(item => (item.parentCategory && item.parentCategory.id === category.id))\r\n        setListSubCategories(listSubc)\r\n        setActiveSubCategory({})\r\n    }\r\n\r\n    const setActiveSubCategory = subCategory => {\r\n        onChange( {target: {name: 'subCategory', value: subCategory}})\r\n    }\r\n\r\n    const handleChangeCountry = country => {\r\n        onChange( {target: {name: 'country', value: country}})\r\n    };\r\n\r\n    const toggleItem = (item) => {\r\n        let arr = addOrRemove(offer.type, item);\r\n        onChange( {target: {name: 'type', value: arr}})\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Label >Name your offer</Label>\r\n            <Input\r\n                name='name'\r\n                value={offer.name}\r\n                onChange={onChange}\r\n                mb={30}\r\n                placeholder=\"Ex.: Singing opera\"\r\n            />\r\n            <Label >Add a short summary of the offer</Label>\r\n            <TextArea\r\n                name='summary'\r\n                value={offer.summary}\r\n                onChange={onChange}\r\n                height={95}\r\n                count={offer.summary? offer.summary.length : ''}\r\n                placeholder=\"Ex.: Singing rock opera covers of the hits \"\r\n            />\r\n            <Label mt={20} >What is the category of your programmer?</Label>\r\n            {listParentCategories.length ?\r\n                <>\r\n                    {listParentCategories.map((item, key)=> {\r\n                        return (\r\n                            <Tab key={key}\r\n                                 title={item.category}\r\n                                 onClick={() => setActiveCategory(item)}\r\n                                 active={item.id == offer.category.id}\r\n                            />\r\n                        )\r\n                    })}\r\n                </>\r\n                :\r\n                <>\r\n                    <div>Loading...</div>\r\n                </>\r\n            }\r\n\r\n            {offer.category.id && !!listSubCategories.length &&\r\n            <>\r\n                <Label mt={40} >Choose the technology/language you use</Label>\r\n                {listSubCategories.map((item, key)=>\r\n                    <Tab key={key}\r\n                         title={item.category}\r\n                         onClick={() => setActiveSubCategory(item)}\r\n                         active={item.id == offer.subCategory.id}\r\n                    />\r\n                )}\r\n            </>\r\n            }\r\n\r\n            <Button green loading={isLoading} onClick={onSave} mt={70}>Save</Button>\r\n        </>\r\n    );\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}