{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport Modal from 'react-modal';\nimport ReactSelect from 'react-select';\nimport { Input, TextArea } from '../../components/controls/Input/Input';\nimport { Button } from '../../components/controls/Button/Button';\nimport Select from '../../components/controls/Select/Select';\nimport { apiCreateParam, apiGetParams, apiEditParam } from '../../actions/api';\nimport '../../static/css/styles-admin.css';\nimport { Label } from \"../../components/Layouts/styledLayouts\";\nvar options = [{\n  value: '1',\n  label: '1'\n}, {\n  value: '2',\n  label: '2'\n}, {\n  value: '3',\n  label: '3'\n}, {\n  value: '4',\n  label: '4'\n}];\nvar options2 = [{\n  value: 'bool',\n  label: 'Yes/No'\n}, {\n  value: 'int',\n  label: 'Number'\n}, {\n  value: 'list',\n  label: 'List'\n}, {\n  value: 'input',\n  label: 'Text'\n}];\n\nvar Params = function Params() {\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSending = _useState3[0],\n      setIsSending = _useState3[1];\n\n  var _useState4 = useState({}),\n      params = _useState4[0],\n      setParams = _useState4[1];\n\n  var _useState5 = useState([]),\n      listParams = _useState5[0],\n      setListParams = _useState5[1];\n\n  var _useState6 = useState([]),\n      optionsCategories = _useState6[0],\n      setOptionsCategories = _useState6[1];\n\n  useEffect(function () {\n    apiGetParams().then(function (res) {\n      res.data.map(function (item) {\n        // debugger\n        item.step = {\n          value: item.step,\n          label: item.step\n        };\n        item.type = options2.find(function (item2) {\n          return item2.value == item.type;\n        }); // debugger\n      });\n      setListParams(res.data);\n    });\n  }, []);\n\n  var handleEditParam = function handleEditParam(param) {\n    var clone = _Object$assign({}, param);\n\n    setParams(clone);\n    setIsOpen(true);\n  };\n\n  var openModal = function openModal() {\n    setIsOpen(true);\n  };\n\n  var closeModal = function closeModal() {\n    setIsOpen(false);\n    setParams({});\n  };\n\n  var onChange = function onChange(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    setParams(_objectSpread({}, params, _defineProperty({}, name, value)));\n  };\n\n  var handleCreateEdit = function handleCreateEdit() {\n    var obj = _Object$assign({}, params);\n\n    obj.type = params.type ? params.type.value : '';\n    obj.step = params.step ? params.step.value : '';\n    if (_Array$isArray(params.possibleValues)) params.possibleValues = params.possibleValues[0];\n    obj.possibleValues = params.possibleValues ? params.possibleValues.split(',') : '';\n\n    if (obj.id) {\n      apiEditParam(obj).then(function (res) {\n        res.data.step = {\n          value: res.data.step,\n          label: res.data.step\n        };\n        res.data.type = options2.find(function (item2) {\n          return item2.value == res.data.type;\n        });\n        var newArr = listParams.map(function (el) {\n          return el.id === res.data.id ? _Object$assign({}, res.data) : el;\n        });\n        setListParams(newArr);\n        closeModal();\n      })[\"catch\"](function (e) {});\n    } else {\n      apiCreateParam(obj).then(function (res) {\n        res.data.step = {\n          value: res.data.step,\n          label: res.data.step\n        };\n        res.data.type = options2.find(function (item2) {\n          return item2.value == res.data.type;\n        });\n        setListParams([].concat(_toConsumableArray(listParams), [res.data]));\n        closeModal();\n      })[\"catch\"](function (e) {});\n    }\n  };\n\n  var onChangeStep = function onChangeStep(value) {\n    setParams(_objectSpread({}, params, _defineProperty({}, 'step', value)));\n  };\n\n  var onChangeType = function onChangeType(value) {\n    setParams(_objectSpread({}, params, _defineProperty({}, 'type', value)));\n  };\n\n  var onChangeCategories = function onChangeCategories(value) {\n    setParams(_objectSpread({}, params, _defineProperty({}, 'categories', value)));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: 'z-wrap-admin'\n  }, __jsx(\"h2\", null, \"Params\", __jsx(Button, {\n    inline: true,\n    onClick: openModal\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\")), __jsx(\"div\", {\n    className: \"z-custom-table\"\n  }, __jsx(\"div\", {\n    className: \"z-custom-table-header\"\n  }, __jsx(\"div\", {\n    className: \"z-custom-table-column-1\"\n  }, \"Title\"), __jsx(\"div\", {\n    className: \"z-custom-table-column-1\"\n  }, \"Description\"), __jsx(\"div\", {\n    className: \"z-custom-table-column-2\"\n  }, \"Step\"), __jsx(\"div\", {\n    className: \"z-custom-table-column-2\"\n  }, \"Unit\"), __jsx(\"div\", {\n    className: \"z-custom-table-column-2\"\n  }, \"Type\"), __jsx(\"div\", {\n    className: \"z-custom-table-column-2\"\n  }, \"Possible Values\"), __jsx(\"div\", {\n    className: \"z-custom-table-column-2\"\n  }, \"Default Value\"), __jsx(\"div\", {\n    className: \"z-custom-table-column-2\"\n  }, \"Actions\")), listParams.map(function (item) {\n    return __jsx(\"div\", {\n      key: item.id,\n      className: \"z-custom-table-row\"\n    }, __jsx(\"div\", {\n      className: \"z-custom-table-column-1\"\n    }, item.title), __jsx(\"div\", {\n      className: \"z-custom-table-column-1\"\n    }, item.description), __jsx(\"div\", {\n      className: \"z-custom-table-column-2\"\n    }, item.step.value), __jsx(\"div\", {\n      className: \"z-custom-table-column-2\"\n    }, item.units), __jsx(\"div\", {\n      className: \"z-custom-table-column-2\"\n    }, item.type.value), __jsx(\"div\", {\n      className: \"z-custom-table-column-2\"\n    }, item.possibleValues.join(', ')), __jsx(\"div\", {\n      className: \"z-custom-table-column-2\"\n    }, item.defaultValue), __jsx(\"div\", {\n      className: \"z-custom-table-column-2\"\n    }, __jsx(\"span\", {\n      onClick: function onClick() {\n        return handleEditParam(item);\n      }\n    }, \"Edit\")));\n  }))), __jsx(Modal, {\n    isOpen: isOpen,\n    onRequestClose: closeModal,\n    ariaHideApp: false,\n    className: \" modal-params\"\n  }, __jsx(\"div\", {\n    className: 'mp-wrap'\n  }, __jsx(\"div\", {\n    className: \"mp-title\"\n  }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u0430\\u043C\\u0435\\u0442\\u0440\"), __jsx(\"div\", {\n    className: \"mp-content\"\n  }, __jsx(\"div\", {\n    className: \"mp-label\"\n  }, \"Title\"), __jsx(Input, {\n    value: params.title,\n    name: \"title\",\n    onChange: onChange,\n    placeholder: \"Title\",\n    mb: '5px'\n  }), __jsx(\"div\", {\n    className: \"mp-label\"\n  }, \"Description\"), __jsx(TextArea, {\n    name: \"description\",\n    value: params.description,\n    onChange: onChange,\n    height: 80,\n    placeholder: \"Description\",\n    mb: '5px'\n  }), __jsx(\"div\", {\n    className: \"mp-label\"\n  }, \"Type\"), __jsx(Select, {\n    options: options2,\n    value: params.type,\n    onChange: onChangeType,\n    mb: '10px'\n  }), __jsx(\"div\", {\n    className: \"mp-label\"\n  }, \"Step\"), __jsx(Select, {\n    options: options,\n    value: params.step,\n    onChange: onChangeStep,\n    mb: '10px'\n  }), __jsx(\"div\", {\n    className: \"mp-label\"\n  }, \"Unit\"), __jsx(Input, {\n    value: params.units,\n    name: \"units\",\n    onChange: onChange,\n    placeholder: \"Unit\",\n    mb: '5px'\n  }), params.type && params.type.value === 'list' && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"mp-label\"\n  }, \"Possible Values (via comma, etc: \\\"1, 2, 3\\\")\"), __jsx(Input, {\n    value: params.possibleValues,\n    name: \"possibleValues\",\n    onChange: onChange,\n    placeholder: \"Possible Values\",\n    mb: '5px'\n  })), __jsx(\"div\", {\n    className: \"mp-label\"\n  }, \"Default Value\"), __jsx(Input, {\n    value: params.defaultValue,\n    name: \"defaultValue\",\n    onChange: onChange,\n    placeholder: \"pv\",\n    mb: '5px'\n  })), __jsx(\"div\", {\n    className: \"mp-footer\"\n  }, __jsx(Button, {\n    inline: true,\n    blue: true,\n    onClick: handleCreateEdit\n  }, params.id ? 'Редактировать' : 'Создать'), __jsx(Button, {\n    inline: true,\n    onClick: closeModal\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")))));\n};\n\nexport default Params;","map":{"version":3,"sources":["D:/4/диплом/webapp/pages/admin/params.js"],"names":["React","useState","useContext","useEffect","Modal","ReactSelect","Input","TextArea","Button","Select","apiCreateParam","apiGetParams","apiEditParam","Label","options","value","label","options2","Params","isOpen","setIsOpen","isLoading","setIsLoading","isSending","setIsSending","params","setParams","listParams","setListParams","optionsCategories","setOptionsCategories","then","res","data","map","item","step","type","find","item2","handleEditParam","param","clone","openModal","closeModal","onChange","e","target","name","handleCreateEdit","obj","possibleValues","split","id","newArr","el","onChangeStep","onChangeType","onChangeCategories","title","description","units","join","defaultValue"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,uCAA9B;AACA,SAAQC,MAAR,QAAqB,yCAArB;AACA,OAAOC,MAAP,MAAmB,yCAAnB;AAEA,SAAQC,cAAR,EAAwBC,YAAxB,EAAsCC,YAAtC,QAAyD,mBAAzD;AAEA,OAAO,mCAAP;AACA,SAAQC,KAAR,QAAoB,wCAApB;AAEA,IAAMC,OAAO,GAAG,CACZ;AAAEC,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,KAAK,EAAE;AAArB,CADY,EAEZ;AAAED,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,KAAK,EAAE;AAArB,CAFY,EAGZ;AAAED,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,KAAK,EAAE;AAArB,CAHY,EAIZ;AAAED,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,KAAK,EAAE;AAArB,CAJY,CAAhB;AAMA,IAAMC,QAAQ,GAAG,CACb;AAAEF,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,KAAK,EAAE;AAAxB,CADa,EAEb;AAAED,EAAAA,KAAK,EAAE,KAAT;AAAgBC,EAAAA,KAAK,EAAE;AAAvB,CAFa,EAGb;AAAED,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,KAAK,EAAE;AAAxB,CAHa,EAIb;AAAED,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CAJa,CAAjB;;AAQA,IAAME,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,kBACWjB,QAAQ,CAAC,KAAD,CADnB;AAAA,MACVkB,MADU;AAAA,MACFC,SADE;;AAAA,mBAEiBnB,QAAQ,CAAC,KAAD,CAFzB;AAAA,MAEVoB,SAFU;AAAA,MAECC,YAFD;;AAAA,mBAGiBrB,QAAQ,CAAC,KAAD,CAHzB;AAAA,MAGVsB,SAHU;AAAA,MAGCC,YAHD;;AAAA,mBAIWvB,QAAQ,CAAC,EAAD,CAJnB;AAAA,MAIVwB,MAJU;AAAA,MAIFC,SAJE;;AAAA,mBAKmBzB,QAAQ,CAAC,EAAD,CAL3B;AAAA,MAKV0B,UALU;AAAA,MAKEC,aALF;;AAAA,mBAMiC3B,QAAQ,CAAC,EAAD,CANzC;AAAA,MAMV4B,iBANU;AAAA,MAMSC,oBANT;;AASjB3B,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,YAAY,GACPoB,IADL,CACU,UAAAC,GAAG,EAAI;AACTA,MAAAA,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAa,UAAAC,IAAI,EAAI;AACjB;AACAA,QAAAA,IAAI,CAACC,IAAL,GAAY;AAACrB,UAAAA,KAAK,EAAEoB,IAAI,CAACC,IAAb;AAAmBpB,UAAAA,KAAK,EAAEmB,IAAI,CAACC;AAA/B,SAAZ;AACAD,QAAAA,IAAI,CAACE,IAAL,GAAYpB,QAAQ,CAACqB,IAAT,CAAc,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACxB,KAAN,IAAeoB,IAAI,CAACE,IAAxB;AAAA,SAAnB,CAAZ,CAHiB,CAIjB;AACH,OALD;AAQAT,MAAAA,aAAa,CAACI,GAAG,CAACC,IAAL,CAAb;AACH,KAXL;AAYH,GAbQ,EAaN,EAbM,CAAT;;AAeA,MAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,QAAIC,KAAK,GAAG,eAAc,EAAd,EAAkBD,KAAlB,CAAZ;;AACAf,IAAAA,SAAS,CAACgB,KAAD,CAAT;AACAtB,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAJD;;AAMA,MAAMuB,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBvB,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAFD;;AAGA,MAAMwB,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBxB,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAM,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH,GAHD;;AAMA,MAAMmB,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;AAAA,oBACAA,CAAC,CAACC,MADF;AAAA,QACfC,IADe,aACfA,IADe;AAAA,QACTjC,KADS,aACTA,KADS;AAEpBW,IAAAA,SAAS,mBAAKD,MAAL,sBAAcuB,IAAd,EAAqBjC,KAArB,GAAT;AACH,GAHD;;AAIA,MAAMkC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3B,QAAIC,GAAG,GAAG,eAAc,EAAd,EAAkBzB,MAAlB,CAAV;;AACAyB,IAAAA,GAAG,CAACb,IAAJ,GAAWZ,MAAM,CAACY,IAAP,GAAaZ,MAAM,CAACY,IAAP,CAAYtB,KAAzB,GAAiC,EAA5C;AACAmC,IAAAA,GAAG,CAACd,IAAJ,GAAWX,MAAM,CAACW,IAAP,GAAaX,MAAM,CAACW,IAAP,CAAYrB,KAAzB,GAAiC,EAA5C;AAEA,QAAG,eAAcU,MAAM,CAAC0B,cAArB,CAAH,EAAyC1B,MAAM,CAAC0B,cAAP,GAAwB1B,MAAM,CAAC0B,cAAP,CAAsB,CAAtB,CAAxB;AACzCD,IAAAA,GAAG,CAACC,cAAJ,GAAsB1B,MAAM,CAAC0B,cAAP,GAAwB1B,MAAM,CAAC0B,cAAP,CAAsBC,KAAtB,CAA4B,GAA5B,CAAxB,GAA2D,EAAjF;;AAKA,QAAGF,GAAG,CAACG,EAAP,EAAW;AACPzC,MAAAA,YAAY,CAACsC,GAAD,CAAZ,CACKnB,IADL,CACU,UAAAC,GAAG,EAAI;AACTA,QAAAA,GAAG,CAACC,IAAJ,CAASG,IAAT,GAAgB;AAACrB,UAAAA,KAAK,EAAEiB,GAAG,CAACC,IAAJ,CAASG,IAAjB;AAAuBpB,UAAAA,KAAK,EAAEgB,GAAG,CAACC,IAAJ,CAASG;AAAvC,SAAhB;AACAJ,QAAAA,GAAG,CAACC,IAAJ,CAASI,IAAT,GAAgBpB,QAAQ,CAACqB,IAAT,CAAc,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACxB,KAAN,IAAeiB,GAAG,CAACC,IAAJ,CAASI,IAA5B;AAAA,SAAnB,CAAhB;AACA,YAAIiB,MAAM,GAAG3B,UAAU,CAACO,GAAX,CAAe,UAAAqB,EAAE;AAAA,iBAAKA,EAAE,CAACF,EAAH,KAAUrB,GAAG,CAACC,IAAJ,CAASoB,EAAnB,GAAwB,eAAc,EAAd,EAAkBrB,GAAG,CAACC,IAAtB,CAAxB,GAAsDsB,EAA3D;AAAA,SAAjB,CAAb;AACA3B,QAAAA,aAAa,CAAC0B,MAAD,CAAb;AACAV,QAAAA,UAAU;AACb,OAPL,WAQW,UAAAE,CAAC,EAAI,CAEX,CAVL;AAWH,KAZD,MAYO;AACHpC,MAAAA,cAAc,CAACwC,GAAD,CAAd,CACKnB,IADL,CACU,UAAAC,GAAG,EAAI;AACTA,QAAAA,GAAG,CAACC,IAAJ,CAASG,IAAT,GAAgB;AAACrB,UAAAA,KAAK,EAAEiB,GAAG,CAACC,IAAJ,CAASG,IAAjB;AAAuBpB,UAAAA,KAAK,EAAEgB,GAAG,CAACC,IAAJ,CAASG;AAAvC,SAAhB;AACAJ,QAAAA,GAAG,CAACC,IAAJ,CAASI,IAAT,GAAgBpB,QAAQ,CAACqB,IAAT,CAAc,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACxB,KAAN,IAAeiB,GAAG,CAACC,IAAJ,CAASI,IAA5B;AAAA,SAAnB,CAAhB;AACAT,QAAAA,aAAa,8BAAKD,UAAL,IAAiBK,GAAG,CAACC,IAArB,GAAb;AACAW,QAAAA,UAAU;AACb,OANL,WAOW,UAAAE,CAAC,EAAI,CAEX,CATL;AAUH;AAGJ,GArCD;;AAwCA,MAAIU,YAAY,GAAG,SAAfA,YAAe,CAACzC,KAAD,EAAW;AAC1BW,IAAAA,SAAS,mBAAKD,MAAL,sBAAc,MAAd,EAAuBV,KAAvB,GAAT;AACH,GAFD;;AAGA,MAAI0C,YAAY,GAAG,SAAfA,YAAe,CAAC1C,KAAD,EAAW;AAC1BW,IAAAA,SAAS,mBAAKD,MAAL,sBAAc,MAAd,EAAuBV,KAAvB,GAAT;AACH,GAFD;;AAGA,MAAI2C,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC3C,KAAD,EAAW;AAChCW,IAAAA,SAAS,mBAAKD,MAAL,sBAAc,YAAd,EAA6BV,KAA7B,GAAT;AACH,GAFD;;AAMA,SACI,4BACI;AAAK,IAAA,SAAS,EAAE;AAAhB,KACI,4BAEI,MAAC,MAAD;AACI,IAAA,MAAM,MADV;AAEI,IAAA,OAAO,EAAE4B;AAFb,wDAFJ,CADJ,EAWI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,aADJ,EAII;AAAK,IAAA,SAAS,EAAC;AAAf,mBAJJ,EAOI;AAAK,IAAA,SAAS,EAAC;AAAf,YAPJ,EAUI;AAAK,IAAA,SAAS,EAAC;AAAf,YAVJ,EAaI;AAAK,IAAA,SAAS,EAAC;AAAf,YAbJ,EAgBI;AAAK,IAAA,SAAS,EAAC;AAAf,uBAhBJ,EAmBI;AAAK,IAAA,SAAS,EAAC;AAAf,qBAnBJ,EAsBI;AAAK,IAAA,SAAS,EAAC;AAAf,eAtBJ,CADJ,EA4BKhB,UAAU,CAACO,GAAX,CAAe,UAAAC,IAAI;AAAA,WAChB;AAAK,MAAA,GAAG,EAAEA,IAAI,CAACkB,EAAf;AAAmB,MAAA,SAAS,EAAC;AAA7B,OACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACKlB,IAAI,CAACwB,KADV,CADJ,EAII;AAAK,MAAA,SAAS,EAAC;AAAf,OACKxB,IAAI,CAACyB,WADV,CAJJ,EAOI;AAAK,MAAA,SAAS,EAAC;AAAf,OACKzB,IAAI,CAACC,IAAL,CAAUrB,KADf,CAPJ,EAUI;AAAK,MAAA,SAAS,EAAC;AAAf,OACKoB,IAAI,CAAC0B,KADV,CAVJ,EAaI;AAAK,MAAA,SAAS,EAAC;AAAf,OACK1B,IAAI,CAACE,IAAL,CAAUtB,KADf,CAbJ,EAgBI;AAAK,MAAA,SAAS,EAAC;AAAf,OACKoB,IAAI,CAACgB,cAAL,CAAoBW,IAApB,CAAyB,IAAzB,CADL,CAhBJ,EAmBI;AAAK,MAAA,SAAS,EAAC;AAAf,OACK3B,IAAI,CAAC4B,YADV,CAnBJ,EAsBI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAM,MAAA,OAAO,EAAE;AAAA,eAAMvB,eAAe,CAACL,IAAD,CAArB;AAAA;AAAf,cADJ,CAtBJ,CADgB;AAAA,GAAnB,CA5BL,CAXJ,CADJ,EAuEI,MAAC,KAAD;AACI,IAAA,MAAM,EAAEhB,MADZ;AAEI,IAAA,cAAc,EAAEyB,UAFpB;AAGI,IAAA,WAAW,EAAE,KAHjB;AAII,IAAA,SAAS,EAAC;AAJd,KAOI;AAAK,IAAA,SAAS,EAAE;AAAhB,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,kIADJ,EAII;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,aADJ,EAEI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEnB,MAAM,CAACkC,KAArB;AACO,IAAA,IAAI,EAAC,OADZ;AAEO,IAAA,QAAQ,EAAEd,QAFjB;AAGO,IAAA,WAAW,EAAC,OAHnB;AAIO,IAAA,EAAE,EAAE;AAJX,IAFJ,EAQI;AAAK,IAAA,SAAS,EAAC;AAAf,mBARJ,EASI,MAAC,QAAD;AAAU,IAAA,IAAI,EAAC,aAAf;AACU,IAAA,KAAK,EAAEpB,MAAM,CAACmC,WADxB;AAEU,IAAA,QAAQ,EAAEf,QAFpB;AAGU,IAAA,MAAM,EAAE,EAHlB;AAIU,IAAA,WAAW,EAAC,aAJtB;AAKU,IAAA,EAAE,EAAE;AALd,IATJ,EAgBI;AAAK,IAAA,SAAS,EAAC;AAAf,YAhBJ,EAiBI,MAAC,MAAD;AACI,IAAA,OAAO,EAAE5B,QADb;AAEI,IAAA,KAAK,EAAEQ,MAAM,CAACY,IAFlB;AAGI,IAAA,QAAQ,EAAEoB,YAHd;AAII,IAAA,EAAE,EAAE;AAJR,IAjBJ,EAuBI;AAAK,IAAA,SAAS,EAAC;AAAf,YAvBJ,EAwBI,MAAC,MAAD;AACI,IAAA,OAAO,EAAE3C,OADb;AAEI,IAAA,KAAK,EAAEW,MAAM,CAACW,IAFlB;AAGI,IAAA,QAAQ,EAAEoB,YAHd;AAII,IAAA,EAAE,EAAE;AAJR,IAxBJ,EA8BI;AAAK,IAAA,SAAS,EAAC;AAAf,YA9BJ,EA+BI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAE/B,MAAM,CAACoC,KAArB;AACO,IAAA,IAAI,EAAC,OADZ;AAEO,IAAA,QAAQ,EAAEhB,QAFjB;AAGO,IAAA,WAAW,EAAC,MAHnB;AAIO,IAAA,EAAE,EAAE;AAJX,IA/BJ,EAqCKpB,MAAM,CAACY,IAAP,IAAeZ,MAAM,CAACY,IAAP,CAAYtB,KAAZ,KAAsB,MAArC,IACG,4BACI;AAAK,IAAA,SAAS,EAAC;AAAf,qDADJ,EAEI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEU,MAAM,CAAC0B,cAArB;AACO,IAAA,IAAI,EAAC,gBADZ;AAEO,IAAA,QAAQ,EAAEN,QAFjB;AAGO,IAAA,WAAW,EAAC,iBAHnB;AAIO,IAAA,EAAE,EAAE;AAJX,IAFJ,CAtCR,EAiDI;AAAK,IAAA,SAAS,EAAC;AAAf,qBAjDJ,EAkDI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEpB,MAAM,CAACsC,YAArB;AACO,IAAA,IAAI,EAAC,cADZ;AAEO,IAAA,QAAQ,EAAElB,QAFjB;AAGO,IAAA,WAAW,EAAC,IAHnB;AAIO,IAAA,EAAE,EAAE;AAJX,IAlDJ,CAJJ,EAwEI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,MAAC,MAAD;AACI,IAAA,MAAM,MADV;AAEI,IAAA,IAAI,MAFR;AAGI,IAAA,OAAO,EAAEI;AAHb,KAKKxB,MAAM,CAAC4B,EAAP,GAAW,eAAX,GAA6B,SALlC,CADJ,EASI,MAAC,MAAD;AACI,IAAA,MAAM,MADV;AAEI,IAAA,OAAO,EAAET;AAFb,kDATJ,CAxEJ,CAPJ,CAvEJ,CADJ;AA8KH,CA7QD;;AA+QA,eAAe1B,MAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport Modal from 'react-modal';\r\nimport ReactSelect from 'react-select';\r\n\r\nimport {Input, TextArea} from '../../components/controls/Input/Input'\r\nimport {Button} from '../../components/controls/Button/Button'\r\nimport Select from '../../components/controls/Select/Select'\r\n\r\nimport {apiCreateParam, apiGetParams, apiEditParam} from '../../actions/api'\r\n\r\nimport '../../static/css/styles-admin.css'\r\nimport {Label} from \"../../components/Layouts/styledLayouts\";\r\n\r\nconst options = [\r\n    { value: '1', label: '1' },\r\n    { value: '2', label: '2' },\r\n    { value: '3', label: '3' },\r\n    { value: '4', label: '4' }\r\n];\r\nconst options2 = [\r\n    { value: 'bool', label: 'Yes/No' },\r\n    { value: 'int', label: 'Number' },\r\n    { value: 'list', label: 'List' },\r\n    { value: 'input', label: 'Text' }\r\n];\r\n\r\n\r\nconst Params = () => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [isSending, setIsSending] = useState(false)\r\n    const [params, setParams] = useState({})\r\n    const [listParams, setListParams] = useState([])\r\n    const [optionsCategories, setOptionsCategories] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        apiGetParams()\r\n            .then(res => {\r\n                res.data.map(item => {\r\n                    // debugger\r\n                    item.step = {value: item.step, label: item.step}\r\n                    item.type = options2.find(item2 => item2.value == item.type)\r\n                    // debugger\r\n                })\r\n\r\n\r\n                setListParams(res.data)\r\n            })\r\n    }, [])\r\n\r\n    const handleEditParam = (param) => {\r\n        let clone = Object.assign({}, param)\r\n        setParams(clone)\r\n        setIsOpen(true)\r\n    }\r\n\r\n    const openModal = () => {\r\n        setIsOpen(true)\r\n    }\r\n    const closeModal = () => {\r\n        setIsOpen(false)\r\n        setParams({})\r\n    }\r\n\r\n\r\n    const onChange = (e) => {\r\n        let {name, value} = e.target;\r\n        setParams({...params, [name]: value})\r\n    }\r\n    const handleCreateEdit = () => {\r\n        let obj = Object.assign({}, params)\r\n        obj.type = params.type? params.type.value : ''\r\n        obj.step = params.step? params.step.value : ''\r\n\r\n        if(Array.isArray(params.possibleValues)) params.possibleValues = params.possibleValues[0]\r\n        obj.possibleValues =  params.possibleValues ? params.possibleValues.split(',') : ''\r\n\r\n\r\n\r\n\r\n        if(obj.id) {\r\n            apiEditParam(obj)\r\n                .then(res => {\r\n                    res.data.step = {value: res.data.step, label: res.data.step}\r\n                    res.data.type = options2.find(item2 => item2.value == res.data.type)\r\n                    let newArr = listParams.map(el => (el.id === res.data.id ? Object.assign({}, res.data) : el))\r\n                    setListParams(newArr)\r\n                    closeModal()\r\n                })\r\n                .catch(e => {\r\n\r\n                })\r\n        } else {\r\n            apiCreateParam(obj)\r\n                .then(res => {\r\n                    res.data.step = {value: res.data.step, label: res.data.step}\r\n                    res.data.type = options2.find(item2 => item2.value == res.data.type)\r\n                    setListParams([...listParams, res.data])\r\n                    closeModal()\r\n                })\r\n                .catch(e => {\r\n\r\n                })\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    let onChangeStep = (value) => {\r\n        setParams({...params, ['step']: value})\r\n    }\r\n    let onChangeType = (value) => {\r\n        setParams({...params, ['type']: value})\r\n    }\r\n    let onChangeCategories = (value) => {\r\n        setParams({...params, ['categories']: value})\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={'z-wrap-admin'}>\r\n                <h2>\r\n                    Params\r\n                    <Button\r\n                        inline\r\n                        onClick={openModal}\r\n                    >\r\n                        Добавить\r\n                    </Button>\r\n                </h2>\r\n\r\n                <div className=\"z-custom-table\">\r\n                    <div className=\"z-custom-table-header\">\r\n                        <div className=\"z-custom-table-column-1\">\r\n                            Title\r\n                        </div>\r\n                        <div className=\"z-custom-table-column-1\">\r\n                            Description\r\n                        </div>\r\n                        <div className=\"z-custom-table-column-2\">\r\n                            Step\r\n                        </div>\r\n                        <div className=\"z-custom-table-column-2\">\r\n                            Unit\r\n                        </div>\r\n                        <div className=\"z-custom-table-column-2\">\r\n                            Type\r\n                        </div>\r\n                        <div className=\"z-custom-table-column-2\">\r\n                            Possible Values\r\n                        </div>\r\n                        <div className=\"z-custom-table-column-2\">\r\n                            Default Value\r\n                        </div>\r\n                        <div className=\"z-custom-table-column-2\">\r\n                            Actions\r\n                        </div>\r\n                    </div>\r\n\r\n                    {listParams.map(item =>\r\n                        <div key={item.id} className=\"z-custom-table-row\">\r\n                            <div className=\"z-custom-table-column-1\">\r\n                                {item.title}\r\n                            </div>\r\n                            <div className=\"z-custom-table-column-1\">\r\n                                {item.description}\r\n                            </div>\r\n                            <div className=\"z-custom-table-column-2\">\r\n                                {item.step.value}\r\n                            </div>\r\n                            <div className=\"z-custom-table-column-2\">\r\n                                {item.units}\r\n                            </div>\r\n                            <div className=\"z-custom-table-column-2\">\r\n                                {item.type.value}\r\n                            </div>\r\n                            <div className=\"z-custom-table-column-2\">\r\n                                {item.possibleValues.join(', ')}\r\n                            </div>\r\n                            <div className=\"z-custom-table-column-2\">\r\n                                {item.defaultValue}\r\n                            </div>\r\n                            <div className=\"z-custom-table-column-2\">\r\n                                <span onClick={() => handleEditParam(item)}>Edit</span>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <Modal\r\n                isOpen={isOpen}\r\n                onRequestClose={closeModal}\r\n                ariaHideApp={false}\r\n                className=\" modal-params\"\r\n            >\r\n\r\n                <div className={'mp-wrap'}>\r\n                    <div className=\"mp-title\">\r\n                        Создать новый параметр\r\n                    </div>\r\n                    <div className=\"mp-content\">\r\n                        <div className='mp-label'>Title</div>\r\n                        <Input value={params.title}\r\n                               name='title'\r\n                               onChange={onChange}\r\n                               placeholder=\"Title\"\r\n                               mb={'5px'}\r\n                        />\r\n                        <div className='mp-label'>Description</div>\r\n                        <TextArea name='description'\r\n                                  value={params.description}\r\n                                  onChange={onChange}\r\n                                  height={80}\r\n                                  placeholder=\"Description\"\r\n                                  mb={'5px'}\r\n                        />\r\n                        <div className='mp-label'>Type</div>\r\n                        <Select\r\n                            options={options2}\r\n                            value={params.type}\r\n                            onChange={onChangeType}\r\n                            mb={'10px'}\r\n                        />\r\n                        <div className='mp-label'>Step</div>\r\n                        <Select\r\n                            options={options}\r\n                            value={params.step}\r\n                            onChange={onChangeStep}\r\n                            mb={'10px'}\r\n                        />\r\n                        <div className='mp-label'>Unit</div>\r\n                        <Input value={params.units}\r\n                               name='units'\r\n                               onChange={onChange}\r\n                               placeholder=\"Unit\"\r\n                               mb={'5px'}\r\n                        />\r\n                        {params.type && params.type.value === 'list' &&\r\n                            <>\r\n                                <div className='mp-label'>Possible Values (via comma, etc: \"1, 2, 3\")</div>\r\n                                <Input value={params.possibleValues}\r\n                                       name='possibleValues'\r\n                                       onChange={onChange}\r\n                                       placeholder=\"Possible Values\"\r\n                                       mb={'5px'}\r\n                                />\r\n                            </>\r\n                        }\r\n\r\n                        <div className='mp-label'>Default Value</div>\r\n                        <Input value={params.defaultValue}\r\n                               name='defaultValue'\r\n                               onChange={onChange}\r\n                               placeholder=\"pv\"\r\n                               mb={'5px'}\r\n                        />\r\n\r\n                        {/*<div className='mp-label'>Categories</div>*/}\r\n                        {/*<Select*/}\r\n                        {/*    options={optionsCategories}*/}\r\n                        {/*    value={params.categories}*/}\r\n                        {/*    isMulti={true}*/}\r\n                        {/*    onChange={onChangeCategories}*/}\r\n                        {/*    mb={'10px'}*/}\r\n                        {/*/>*/}\r\n\r\n                    </div>\r\n\r\n                    <div className=\"mp-footer\">\r\n                        <Button\r\n                            inline\r\n                            blue\r\n                            onClick={handleCreateEdit}\r\n                        >\r\n                            {params.id? 'Редактировать' : 'Создать'}\r\n                        </Button>\r\n\r\n                        <Button\r\n                            inline\r\n                            onClick={closeModal}\r\n                        >\r\n                            Закрыть\r\n                        </Button>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </Modal>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default Params;\r\n"]},"metadata":{},"sourceType":"module"}